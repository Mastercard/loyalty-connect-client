/*
 * Mastercard Loyalty Connect Service
 * Rest Service for linking payment cards with loyalty programme
 *
 * OpenAPI spec version: 1.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.loyalty_connect_client.api;

import com.mastercard.developer.loyalty_connect_client.ApiClient;
import com.mastercard.developer.loyalty_connect_client.ApiException;
import com.mastercard.developer.loyalty_connect_client.model.Member;
import com.mastercard.developer.loyalty_connect_client.model.MemberDetails;
import com.mastercard.developer.loyalty_connect_client.model.MemberMerchantResponse;
import com.mastercard.developer.loyalty_connect_client.model.MemberResponse;
import org.junit.Ignore;
import org.junit.Test;

/**
 * API tests for MemberApi
 */
@Ignore
public class MemberApiTest {

    private final ApiClient client = new ApiClient();

    /**
     * Delete a member
     * <p>
     * This API is called when an existing member opts out of MLC. All information related to the member is deleted whenever this API is called.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMemberTest() throws ApiException {
        MemberApi api = new MemberApi(client);
        String memberReferenceId = null;
        String xMerchantKey = null;
        api.deleteMember(memberReferenceId, xMerchantKey);

        // TODO: test validations
    }

    /**
     * Enroll a member
     * <p>
     * Enrolls a new member in MLC. Every member is identified by the business partner (partner code) and member identifier (user id). The member may or may not provide other demographic information for enrollment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enrollMemberTest() throws ApiException {
        MemberApi api = new MemberApi(client);
        Member member = null;
        String xMerchantKey = null;
        MemberMerchantResponse response = api.enrollMember(member, xMerchantKey);
    }

    /**
     * Get a Member
     * <p>
     * Returns the demographic information related to the existing MLC Member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMemberTest() throws ApiException {
        MemberApi api = new MemberApi(client);
        String memberReferenceId = null;
        String xMerchantKey = null;
        MemberResponse response = api.getMember(memberReferenceId, xMerchantKey);

        // TODO: test validations
    }

    /**
     * Update a member
     * <p>
     * Updates the demographic information for an existing member in MLC. The member may or may not provide all demographic information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMemberTest() throws ApiException {
        MemberApi api = new MemberApi(client);
        String memberReferenceId = null;
        MemberDetails memberDetails = null;
        String xMerchantKey = null;
        api.updateMember(memberReferenceId, memberDetails, xMerchantKey);

        // TODO: test validations
    }

}


/*
 * Copyright 2016 MasterCard International.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of
 * conditions and the following disclaimer in the documentation and/or other materials
 * provided with the distribution.
 * Neither the name of the MasterCard International Incorporated nor the names of its
 * contributors may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */
/*
 * Mastercard Loyalty Connect Service
 * Rest Service for linking payment cards with loyalty programme
 *
 * OpenAPI spec version: 1.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.loyalty_connect_client.api;

import com.mastercard.developer.loyalty_connect_client.ApiCallback;
import com.mastercard.developer.loyalty_connect_client.ApiClient;
import com.mastercard.developer.loyalty_connect_client.ApiException;
import com.mastercard.developer.loyalty_connect_client.ApiResponse;
import com.mastercard.developer.loyalty_connect_client.Configuration;
import com.mastercard.developer.loyalty_connect_client.Pair;
import com.mastercard.developer.loyalty_connect_client.ProgressRequestBody;
import com.mastercard.developer.loyalty_connect_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mastercard.developer.loyalty_connect_client.model.Error;
import com.mastercard.developer.loyalty_connect_client.model.MerchantLoyaltyProgram;
import com.mastercard.developer.loyalty_connect_client.model.MerchantLoyaltyProgramResponse;
import com.mastercard.developer.loyalty_connect_client.model.MerchantLoyaltyProgramSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MemberMerchantApi {
    private ApiClient apiClient;

    public MemberMerchantApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MemberMerchantApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteMemberMerchantLoyaltyProgram
     * @param memberReferenceId Unique reference key for a member (required)
     * @param memberMerchantReferenceId Unique reference key that identifies member and merchant loyalty program association (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMemberMerchantLoyaltyProgramCall(String memberReferenceId, String memberMerchantReferenceId, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/loyalty-programs/{member_merchant_reference_id}"
            .replaceAll("\\{" + "member_reference_id" + "\\}", apiClient.escapeString(memberReferenceId.toString()))
            .replaceAll("\\{" + "member_merchant_reference_id" + "\\}", apiClient.escapeString(memberMerchantReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", apiClient.parameterToString(xMerchantKey));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMemberMerchantLoyaltyProgramValidateBeforeCall(String memberReferenceId, String memberMerchantReferenceId, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling deleteMemberMerchantLoyaltyProgram(Async)");
        }
        
        // verify the required parameter 'memberMerchantReferenceId' is set
        if (memberMerchantReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberMerchantReferenceId' when calling deleteMemberMerchantLoyaltyProgram(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteMemberMerchantLoyaltyProgramCall(memberReferenceId, memberMerchantReferenceId, xMerchantKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Disconnect a loyalty program for a member
     * Deletes an existing Member and Merchant Loyalty Program association
     * @param memberReferenceId Unique reference key for a member (required)
     * @param memberMerchantReferenceId Unique reference key that identifies member and merchant loyalty program association (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMemberMerchantLoyaltyProgram(String memberReferenceId, String memberMerchantReferenceId, String xMerchantKey) throws ApiException {
        deleteMemberMerchantLoyaltyProgramWithHttpInfo(memberReferenceId, memberMerchantReferenceId, xMerchantKey);
    }

    /**
     * Disconnect a loyalty program for a member
     * Deletes an existing Member and Merchant Loyalty Program association
     * @param memberReferenceId Unique reference key for a member (required)
     * @param memberMerchantReferenceId Unique reference key that identifies member and merchant loyalty program association (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMemberMerchantLoyaltyProgramWithHttpInfo(String memberReferenceId, String memberMerchantReferenceId, String xMerchantKey) throws ApiException {
        com.squareup.okhttp.Call call = deleteMemberMerchantLoyaltyProgramValidateBeforeCall(memberReferenceId, memberMerchantReferenceId, xMerchantKey, null, null);
        return apiClient.execute(call);
    }

    /**
     * Disconnect a loyalty program for a member (asynchronously)
     * Deletes an existing Member and Merchant Loyalty Program association
     * @param memberReferenceId Unique reference key for a member (required)
     * @param memberMerchantReferenceId Unique reference key that identifies member and merchant loyalty program association (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMemberMerchantLoyaltyProgramAsync(String memberReferenceId, String memberMerchantReferenceId, String xMerchantKey, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMemberMerchantLoyaltyProgramValidateBeforeCall(memberReferenceId, memberMerchantReferenceId, xMerchantKey, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllMemberMerchantLoyaltyProgram
     * @param memberReferenceId Unique reference key for a member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param loyaltyId Loyalty Id represents unique member merchant association (optional, default to &quot;vk@mastercard.com&quot;)
     * @param merchantCode Unique code assigned to a merchant on boarded with MLC (optional, default to &quot;MLCMerchant&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllMemberMerchantLoyaltyProgramCall(String memberReferenceId, String xMerchantKey, String loyaltyId, String merchantCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/loyalty-programs"
            .replaceAll("\\{" + "member_reference_id" + "\\}", apiClient.escapeString(memberReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (loyaltyId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("loyalty_id", loyaltyId));
        }

        if (merchantCode != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("merchant_code", merchantCode));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", apiClient.parameterToString(xMerchantKey));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllMemberMerchantLoyaltyProgramValidateBeforeCall(String memberReferenceId, String xMerchantKey, String loyaltyId, String merchantCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling getAllMemberMerchantLoyaltyProgram(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllMemberMerchantLoyaltyProgramCall(memberReferenceId, xMerchantKey, loyaltyId, merchantCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get loyalty programs for a member
     * Returns all loyalty programs in which the member is enrolled. If the member wants to view the details for a specific Merchant Loyalty program the member is enrolled in, then merchant code and Loyalty ID must be provided.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param loyaltyId Loyalty Id represents unique member merchant association (optional, default to &quot;vk@mastercard.com&quot;)
     * @param merchantCode Unique code assigned to a merchant on boarded with MLC (optional, default to &quot;MLCMerchant&quot;)
     * @return MerchantLoyaltyProgramSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MerchantLoyaltyProgramSearchResponse getAllMemberMerchantLoyaltyProgram(String memberReferenceId, String xMerchantKey, String loyaltyId, String merchantCode) throws ApiException {
        ApiResponse<MerchantLoyaltyProgramSearchResponse> resp = getAllMemberMerchantLoyaltyProgramWithHttpInfo(memberReferenceId, xMerchantKey, loyaltyId, merchantCode);
        return resp.getData();
    }

    /**
     * Get loyalty programs for a member
     * Returns all loyalty programs in which the member is enrolled. If the member wants to view the details for a specific Merchant Loyalty program the member is enrolled in, then merchant code and Loyalty ID must be provided.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param loyaltyId Loyalty Id represents unique member merchant association (optional, default to &quot;vk@mastercard.com&quot;)
     * @param merchantCode Unique code assigned to a merchant on boarded with MLC (optional, default to &quot;MLCMerchant&quot;)
     * @return ApiResponse&lt;MerchantLoyaltyProgramSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MerchantLoyaltyProgramSearchResponse> getAllMemberMerchantLoyaltyProgramWithHttpInfo(String memberReferenceId, String xMerchantKey, String loyaltyId, String merchantCode) throws ApiException {
        com.squareup.okhttp.Call call = getAllMemberMerchantLoyaltyProgramValidateBeforeCall(memberReferenceId, xMerchantKey, loyaltyId, merchantCode, null, null);
        Type localVarReturnType = new TypeToken<MerchantLoyaltyProgramSearchResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get loyalty programs for a member (asynchronously)
     * Returns all loyalty programs in which the member is enrolled. If the member wants to view the details for a specific Merchant Loyalty program the member is enrolled in, then merchant code and Loyalty ID must be provided.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param loyaltyId Loyalty Id represents unique member merchant association (optional, default to &quot;vk@mastercard.com&quot;)
     * @param merchantCode Unique code assigned to a merchant on boarded with MLC (optional, default to &quot;MLCMerchant&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllMemberMerchantLoyaltyProgramAsync(String memberReferenceId, String xMerchantKey, String loyaltyId, String merchantCode, final ApiCallback<MerchantLoyaltyProgramSearchResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllMemberMerchantLoyaltyProgramValidateBeforeCall(memberReferenceId, xMerchantKey, loyaltyId, merchantCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MerchantLoyaltyProgramSearchResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMemberMerchantLoyaltyProgram
     * @param memberReferenceId Unique reference key for a member (required)
     * @param memberMerchantReferenceId Unique reference key that identifies member and merchant loyalty program association (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMemberMerchantLoyaltyProgramCall(String memberReferenceId, String memberMerchantReferenceId, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/loyalty-programs/{member_merchant_reference_id}"
            .replaceAll("\\{" + "member_reference_id" + "\\}", apiClient.escapeString(memberReferenceId.toString()))
            .replaceAll("\\{" + "member_merchant_reference_id" + "\\}", apiClient.escapeString(memberMerchantReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", apiClient.parameterToString(xMerchantKey));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMemberMerchantLoyaltyProgramValidateBeforeCall(String memberReferenceId, String memberMerchantReferenceId, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling getMemberMerchantLoyaltyProgram(Async)");
        }
        
        // verify the required parameter 'memberMerchantReferenceId' is set
        if (memberMerchantReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberMerchantReferenceId' when calling getMemberMerchantLoyaltyProgram(Async)");
        }
        

        com.squareup.okhttp.Call call = getMemberMerchantLoyaltyProgramCall(memberReferenceId, memberMerchantReferenceId, xMerchantKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get details for a specific Merchant Loyalty Program
     * Returns Loyalty ID and point balance for a specific Merchant Loyalty Program associated with the member.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param memberMerchantReferenceId Unique reference key that identifies member and merchant loyalty program association (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return MerchantLoyaltyProgramSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MerchantLoyaltyProgramSearchResponse getMemberMerchantLoyaltyProgram(String memberReferenceId, String memberMerchantReferenceId, String xMerchantKey) throws ApiException {
        ApiResponse<MerchantLoyaltyProgramSearchResponse> resp = getMemberMerchantLoyaltyProgramWithHttpInfo(memberReferenceId, memberMerchantReferenceId, xMerchantKey);
        return resp.getData();
    }

    /**
     * Get details for a specific Merchant Loyalty Program
     * Returns Loyalty ID and point balance for a specific Merchant Loyalty Program associated with the member.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param memberMerchantReferenceId Unique reference key that identifies member and merchant loyalty program association (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;MerchantLoyaltyProgramSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MerchantLoyaltyProgramSearchResponse> getMemberMerchantLoyaltyProgramWithHttpInfo(String memberReferenceId, String memberMerchantReferenceId, String xMerchantKey) throws ApiException {
        com.squareup.okhttp.Call call = getMemberMerchantLoyaltyProgramValidateBeforeCall(memberReferenceId, memberMerchantReferenceId, xMerchantKey, null, null);
        Type localVarReturnType = new TypeToken<MerchantLoyaltyProgramSearchResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get details for a specific Merchant Loyalty Program (asynchronously)
     * Returns Loyalty ID and point balance for a specific Merchant Loyalty Program associated with the member.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param memberMerchantReferenceId Unique reference key that identifies member and merchant loyalty program association (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMemberMerchantLoyaltyProgramAsync(String memberReferenceId, String memberMerchantReferenceId, String xMerchantKey, final ApiCallback<MerchantLoyaltyProgramSearchResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMemberMerchantLoyaltyProgramValidateBeforeCall(memberReferenceId, memberMerchantReferenceId, xMerchantKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MerchantLoyaltyProgramSearchResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for joinOrConnectMerchantLoyaltyProgram
     * @param memberReferenceId Unique reference key for a member (required)
     * @param merchantLoyaltyProgram Contains merchant loyalty program details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call joinOrConnectMerchantLoyaltyProgramCall(String memberReferenceId, MerchantLoyaltyProgram merchantLoyaltyProgram, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = merchantLoyaltyProgram;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/loyalty-programs"
            .replaceAll("\\{" + "member_reference_id" + "\\}", apiClient.escapeString(memberReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", apiClient.parameterToString(xMerchantKey));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call joinOrConnectMerchantLoyaltyProgramValidateBeforeCall(String memberReferenceId, MerchantLoyaltyProgram merchantLoyaltyProgram, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling joinOrConnectMerchantLoyaltyProgram(Async)");
        }
        
        // verify the required parameter 'merchantLoyaltyProgram' is set
        if (merchantLoyaltyProgram == null) {
            throw new ApiException("Missing the required parameter 'merchantLoyaltyProgram' when calling joinOrConnectMerchantLoyaltyProgram(Async)");
        }
        

        com.squareup.okhttp.Call call = joinOrConnectMerchantLoyaltyProgramCall(memberReferenceId, merchantLoyaltyProgram, xMerchantKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Enroll a member in a Merchant Loyalty Program
     * Enrolls the member in a Merchant Loyalty Program. Alternately, the member can connect an existing Loyalty ID for the Merchant Loyalty Program.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param merchantLoyaltyProgram Contains merchant loyalty program details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return MerchantLoyaltyProgramResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MerchantLoyaltyProgramResponse joinOrConnectMerchantLoyaltyProgram(String memberReferenceId, MerchantLoyaltyProgram merchantLoyaltyProgram, String xMerchantKey) throws ApiException {
        ApiResponse<MerchantLoyaltyProgramResponse> resp = joinOrConnectMerchantLoyaltyProgramWithHttpInfo(memberReferenceId, merchantLoyaltyProgram, xMerchantKey);
        return resp.getData();
    }

    /**
     * Enroll a member in a Merchant Loyalty Program
     * Enrolls the member in a Merchant Loyalty Program. Alternately, the member can connect an existing Loyalty ID for the Merchant Loyalty Program.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param merchantLoyaltyProgram Contains merchant loyalty program details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;MerchantLoyaltyProgramResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MerchantLoyaltyProgramResponse> joinOrConnectMerchantLoyaltyProgramWithHttpInfo(String memberReferenceId, MerchantLoyaltyProgram merchantLoyaltyProgram, String xMerchantKey) throws ApiException {
        com.squareup.okhttp.Call call = joinOrConnectMerchantLoyaltyProgramValidateBeforeCall(memberReferenceId, merchantLoyaltyProgram, xMerchantKey, null, null);
        Type localVarReturnType = new TypeToken<MerchantLoyaltyProgramResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enroll a member in a Merchant Loyalty Program (asynchronously)
     * Enrolls the member in a Merchant Loyalty Program. Alternately, the member can connect an existing Loyalty ID for the Merchant Loyalty Program.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param merchantLoyaltyProgram Contains merchant loyalty program details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call joinOrConnectMerchantLoyaltyProgramAsync(String memberReferenceId, MerchantLoyaltyProgram merchantLoyaltyProgram, String xMerchantKey, final ApiCallback<MerchantLoyaltyProgramResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = joinOrConnectMerchantLoyaltyProgramValidateBeforeCall(memberReferenceId, merchantLoyaltyProgram, xMerchantKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MerchantLoyaltyProgramResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

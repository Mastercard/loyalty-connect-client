/*
 * Mastercard Loyalty Connect Service
 * Connecting payment and retail loyalty into a single checkout experience
 *
 * The version of the OpenAPI document: 2.2.6
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.mastercard_loyalty_connect_client.api;

import com.mastercard.developer.mastercard_loyalty_connect_client.ApiException;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.Error;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.Member;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.MemberDetails;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.MemberMerchantResponse;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.MemberRefIdError;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.MemberResponse;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.MemberSearch;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.ServiceUnAvailableError;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.UnAuthAccessError;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MemberApi
 */
@Ignore
public class MemberApiTest {

    private final MemberApi api = new MemberApi();

    
    /**
     * Delete a member
     *
     * This API is called when an existing member opts out of MLC. All information related to the member is deleted whenever this API is called.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMemberTest() throws ApiException {
        String xMerchantKey = null;
        String memberReferenceId = null;
        api.deleteMember(xMerchantKey, memberReferenceId);

        // TODO: test validations
    }
    
    /**
     * Enroll a member
     *
     * Enrolls a new member in MLC. Every member is identified by the business partner (partner code) and member identifier (user id). The member may or may not provide other demographic information for enrollment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enrollMemberTest() throws ApiException {
        String xMerchantKey = null;
        Member member = null;
        MemberMerchantResponse response = api.enrollMember(xMerchantKey, member);

        // TODO: test validations
    }
    
    /**
     * Get a Member
     *
     * Returns the demographic information related to the existing MLC Member.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMemberTest() throws ApiException {
        String xMerchantKey = null;
        String memberReferenceId = null;
        MemberResponse response = api.getMember(xMerchantKey, memberReferenceId);

        // TODO: test validations
    }
    
    /**
     * Search a member
     *
     * Search a member in MLC. Every member is identified by the user id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchMemberTest() throws ApiException {
        String xMerchantKey = null;
        MemberSearch memberSearch = null;
        MemberResponse response = api.searchMember(xMerchantKey, memberSearch);

        // TODO: test validations
    }
    
    /**
     * Update a member
     *
     * Updates the demographic information for an existing member in MLC. The member may or may not provide all demographic information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMemberTest() throws ApiException {
        String xMerchantKey = null;
        String memberReferenceId = null;
        MemberDetails memberDetails = null;
        api.updateMember(xMerchantKey, memberReferenceId, memberDetails);

        // TODO: test validations
    }
    
}

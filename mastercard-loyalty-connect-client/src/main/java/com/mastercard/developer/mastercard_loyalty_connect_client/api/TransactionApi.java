/*
 * Mastercard Loyalty Connect Service
 * Rest Service for connecting payment cards with loyalty programs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.mastercard_loyalty_connect_client.api;

import com.mastercard.developer.mastercard_loyalty_connect_client.ApiCallback;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiClient;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiException;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiResponse;
import com.mastercard.developer.mastercard_loyalty_connect_client.Configuration;
import com.mastercard.developer.mastercard_loyalty_connect_client.Pair;
import com.mastercard.developer.mastercard_loyalty_connect_client.ProgressRequestBody;
import com.mastercard.developer.mastercard_loyalty_connect_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mastercard.developer.mastercard_loyalty_connect_client.model.ServiceUnAvailableError;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.Transaction;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.TransactionKsnError;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.TransactionResponse;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.UnauthAccessError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionApi {
    private ApiClient localVarApiClient;

    public TransactionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getLoyaltyId
     * @param transaction The payment card number and merchant code / identifier must be provided in the request body to retrieve the Loyalty ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned loyalty id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Key Serial Number </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoyaltyIdCall(Transaction transaction, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transaction;

        // create path and map variables
        String localVarPath = "/loyalty-ids/searches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoyaltyIdValidateBeforeCall(Transaction transaction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transaction' is set
        if (transaction == null) {
            throw new ApiException("Missing the required parameter 'transaction' when calling getLoyaltyId(Async)");
        }
        

        okhttp3.Call localVarCall = getLoyaltyIdCall(transaction, _callback);
        return localVarCall;

    }

    /**
     * Get loyalty id
     * Returns the Loyalty ID connected with a payment card for a specific Merchant. This API is called when a Member transacts using a payment card connected in MLC at a participating Merchant store.
     * @param transaction The payment card number and merchant code / identifier must be provided in the request body to retrieve the Loyalty ID (required)
     * @return TransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned loyalty id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Key Serial Number </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public TransactionResponse getLoyaltyId(Transaction transaction) throws ApiException {
        ApiResponse<TransactionResponse> localVarResp = getLoyaltyIdWithHttpInfo(transaction);
        return localVarResp.getData();
    }

    /**
     * Get loyalty id
     * Returns the Loyalty ID connected with a payment card for a specific Merchant. This API is called when a Member transacts using a payment card connected in MLC at a participating Merchant store.
     * @param transaction The payment card number and merchant code / identifier must be provided in the request body to retrieve the Loyalty ID (required)
     * @return ApiResponse&lt;TransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned loyalty id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Key Serial Number </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionResponse> getLoyaltyIdWithHttpInfo(Transaction transaction) throws ApiException {
        okhttp3.Call localVarCall = getLoyaltyIdValidateBeforeCall(transaction, null);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get loyalty id (asynchronously)
     * Returns the Loyalty ID connected with a payment card for a specific Merchant. This API is called when a Member transacts using a payment card connected in MLC at a participating Merchant store.
     * @param transaction The payment card number and merchant code / identifier must be provided in the request body to retrieve the Loyalty ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned loyalty id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Key Serial Number </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoyaltyIdAsync(Transaction transaction, final ApiCallback<TransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoyaltyIdValidateBeforeCall(transaction, _callback);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

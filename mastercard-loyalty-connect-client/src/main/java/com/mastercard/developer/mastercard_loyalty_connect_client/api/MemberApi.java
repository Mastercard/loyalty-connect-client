/*
 * Mastercard Loyalty Connect Service
 * Rest Service for connecting payment cards with loyalty programs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.mastercard_loyalty_connect_client.api;

import com.mastercard.developer.mastercard_loyalty_connect_client.ApiCallback;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiClient;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiException;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiResponse;
import com.mastercard.developer.mastercard_loyalty_connect_client.Configuration;
import com.mastercard.developer.mastercard_loyalty_connect_client.Pair;
import com.mastercard.developer.mastercard_loyalty_connect_client.ProgressRequestBody;
import com.mastercard.developer.mastercard_loyalty_connect_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mastercard.developer.mastercard_loyalty_connect_client.model.Error;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.Member;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.MemberDetails;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.MemberMerchantResponse;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.MemberRefIdError;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.MemberResponse;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.ServiceUnAvailableError;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.UnauthAccessError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MemberApi {
    private ApiClient localVarApiClient;

    public MemberApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MemberApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteMember
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Member is successfully deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMemberCall(String memberReferenceId, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}"
            .replaceAll("\\{" + "member_reference_id" + "\\}", localVarApiClient.escapeString(memberReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", localVarApiClient.parameterToString(xMerchantKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMemberValidateBeforeCall(String memberReferenceId, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling deleteMember(Async)");
        }
        

        okhttp3.Call localVarCall = deleteMemberCall(memberReferenceId, xMerchantKey, _callback);
        return localVarCall;

    }

    /**
     * Delete a member
     * This API is called when an existing member opts out of MLC. All information related to the member is deleted whenever this API is called.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Member is successfully deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMember(String memberReferenceId, String xMerchantKey) throws ApiException {
        deleteMemberWithHttpInfo(memberReferenceId, xMerchantKey);
    }

    /**
     * Delete a member
     * This API is called when an existing member opts out of MLC. All information related to the member is deleted whenever this API is called.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Member is successfully deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMemberWithHttpInfo(String memberReferenceId, String xMerchantKey) throws ApiException {
        okhttp3.Call localVarCall = deleteMemberValidateBeforeCall(memberReferenceId, xMerchantKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a member (asynchronously)
     * This API is called when an existing member opts out of MLC. All information related to the member is deleted whenever this API is called.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Member is successfully deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMemberAsync(String memberReferenceId, String xMerchantKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMemberValidateBeforeCall(memberReferenceId, xMerchantKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enrollMember
     * @param memberDetails In order to enroll a member, the partner code, user type and user ID attributes must be provided along with other optional demographic data attributes. The user type can be either &#39;BANK_CUSTOMER_NUMBER&#39; or &#39;MERCHANT_LOYALTY_ID&#39; depending on the business partner setup. (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully enrolled a member </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollMemberCall(Member memberDetails, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = memberDetails;

        // create path and map variables
        String localVarPath = "/members";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", localVarApiClient.parameterToString(xMerchantKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollMemberValidateBeforeCall(Member memberDetails, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'memberDetails' is set
        if (memberDetails == null) {
            throw new ApiException("Missing the required parameter 'memberDetails' when calling enrollMember(Async)");
        }
        

        okhttp3.Call localVarCall = enrollMemberCall(memberDetails, xMerchantKey, _callback);
        return localVarCall;

    }

    /**
     * Enroll a member
     * Enrolls a new member in MLC. Every member is identified by the business partner (partner code) and member identifier (user id). The member may or may not provide other demographic information for enrollment.
     * @param memberDetails In order to enroll a member, the partner code, user type and user ID attributes must be provided along with other optional demographic data attributes. The user type can be either &#39;BANK_CUSTOMER_NUMBER&#39; or &#39;MERCHANT_LOYALTY_ID&#39; depending on the business partner setup. (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return MemberMerchantResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully enrolled a member </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public MemberMerchantResponse enrollMember(Member memberDetails, String xMerchantKey) throws ApiException {
        ApiResponse<MemberMerchantResponse> localVarResp = enrollMemberWithHttpInfo(memberDetails, xMerchantKey);
        return localVarResp.getData();
    }

    /**
     * Enroll a member
     * Enrolls a new member in MLC. Every member is identified by the business partner (partner code) and member identifier (user id). The member may or may not provide other demographic information for enrollment.
     * @param memberDetails In order to enroll a member, the partner code, user type and user ID attributes must be provided along with other optional demographic data attributes. The user type can be either &#39;BANK_CUSTOMER_NUMBER&#39; or &#39;MERCHANT_LOYALTY_ID&#39; depending on the business partner setup. (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;MemberMerchantResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully enrolled a member </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MemberMerchantResponse> enrollMemberWithHttpInfo(Member memberDetails, String xMerchantKey) throws ApiException {
        okhttp3.Call localVarCall = enrollMemberValidateBeforeCall(memberDetails, xMerchantKey, null);
        Type localVarReturnType = new TypeToken<MemberMerchantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enroll a member (asynchronously)
     * Enrolls a new member in MLC. Every member is identified by the business partner (partner code) and member identifier (user id). The member may or may not provide other demographic information for enrollment.
     * @param memberDetails In order to enroll a member, the partner code, user type and user ID attributes must be provided along with other optional demographic data attributes. The user type can be either &#39;BANK_CUSTOMER_NUMBER&#39; or &#39;MERCHANT_LOYALTY_ID&#39; depending on the business partner setup. (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully enrolled a member </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollMemberAsync(Member memberDetails, String xMerchantKey, final ApiCallback<MemberMerchantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollMemberValidateBeforeCall(memberDetails, xMerchantKey, _callback);
        Type localVarReturnType = new TypeToken<MemberMerchantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMember
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Member is successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMemberCall(String memberReferenceId, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}"
            .replaceAll("\\{" + "member_reference_id" + "\\}", localVarApiClient.escapeString(memberReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", localVarApiClient.parameterToString(xMerchantKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMemberValidateBeforeCall(String memberReferenceId, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling getMember(Async)");
        }
        

        okhttp3.Call localVarCall = getMemberCall(memberReferenceId, xMerchantKey, _callback);
        return localVarCall;

    }

    /**
     * Get a Member
     * Returns the demographic information related to the existing MLC Member.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return MemberResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Member is successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public MemberResponse getMember(String memberReferenceId, String xMerchantKey) throws ApiException {
        ApiResponse<MemberResponse> localVarResp = getMemberWithHttpInfo(memberReferenceId, xMerchantKey);
        return localVarResp.getData();
    }

    /**
     * Get a Member
     * Returns the demographic information related to the existing MLC Member.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;MemberResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Member is successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MemberResponse> getMemberWithHttpInfo(String memberReferenceId, String xMerchantKey) throws ApiException {
        okhttp3.Call localVarCall = getMemberValidateBeforeCall(memberReferenceId, xMerchantKey, null);
        Type localVarReturnType = new TypeToken<MemberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Member (asynchronously)
     * Returns the demographic information related to the existing MLC Member.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Member is successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMemberAsync(String memberReferenceId, String xMerchantKey, final ApiCallback<MemberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMemberValidateBeforeCall(memberReferenceId, xMerchantKey, _callback);
        Type localVarReturnType = new TypeToken<MemberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMember
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param memberDetails In order to update the demographic information for a member, the unique reference key must be provided. The member must be an existing one in MLC based on the unique reference key. The member may or may not provide all demographic information for update. (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member is updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMemberCall(String memberReferenceId, MemberDetails memberDetails, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = memberDetails;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}"
            .replaceAll("\\{" + "member_reference_id" + "\\}", localVarApiClient.escapeString(memberReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", localVarApiClient.parameterToString(xMerchantKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMemberValidateBeforeCall(String memberReferenceId, MemberDetails memberDetails, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling updateMember(Async)");
        }
        
        // verify the required parameter 'memberDetails' is set
        if (memberDetails == null) {
            throw new ApiException("Missing the required parameter 'memberDetails' when calling updateMember(Async)");
        }
        

        okhttp3.Call localVarCall = updateMemberCall(memberReferenceId, memberDetails, xMerchantKey, _callback);
        return localVarCall;

    }

    /**
     * Update a member
     * Updates the demographic information for an existing member in MLC. The member may or may not provide all demographic information.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param memberDetails In order to update the demographic information for a member, the unique reference key must be provided. The member must be an existing one in MLC based on the unique reference key. The member may or may not provide all demographic information for update. (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member is updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public void updateMember(String memberReferenceId, MemberDetails memberDetails, String xMerchantKey) throws ApiException {
        updateMemberWithHttpInfo(memberReferenceId, memberDetails, xMerchantKey);
    }

    /**
     * Update a member
     * Updates the demographic information for an existing member in MLC. The member may or may not provide all demographic information.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param memberDetails In order to update the demographic information for a member, the unique reference key must be provided. The member must be an existing one in MLC based on the unique reference key. The member may or may not provide all demographic information for update. (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member is updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMemberWithHttpInfo(String memberReferenceId, MemberDetails memberDetails, String xMerchantKey) throws ApiException {
        okhttp3.Call localVarCall = updateMemberValidateBeforeCall(memberReferenceId, memberDetails, xMerchantKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a member (asynchronously)
     * Updates the demographic information for an existing member in MLC. The member may or may not provide all demographic information.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param memberDetails In order to update the demographic information for a member, the unique reference key must be provided. The member must be an existing one in MLC based on the unique reference key. The member may or may not provide all demographic information for update. (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member is updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMemberAsync(String memberReferenceId, MemberDetails memberDetails, String xMerchantKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMemberValidateBeforeCall(memberReferenceId, memberDetails, xMerchantKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}

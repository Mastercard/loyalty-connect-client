/*
 * Mastercard Loyalty Connect Service
 * Rest Service for linking payment cards with loyalty programme
 *
 * OpenAPI spec version: 1.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.mastercard_loyalty_connect_client.api;

import com.mastercard.developer.mastercard_loyalty_connect_client.ApiCallback;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiClient;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiException;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiResponse;
import com.mastercard.developer.mastercard_loyalty_connect_client.Configuration;
import com.mastercard.developer.mastercard_loyalty_connect_client.Pair;
import com.mastercard.developer.mastercard_loyalty_connect_client.ProgressRequestBody;
import com.mastercard.developer.mastercard_loyalty_connect_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mastercard.developer.mastercard_loyalty_connect_client.model.Error;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.Member;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.MemberDetails;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.MemberMerchantResponse;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.MemberResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MemberApi {
    private ApiClient apiClient;

    public MemberApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MemberApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteMember
     * @param memberReferenceId Unique reference key for a member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMemberCall(String memberReferenceId, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}"
            .replaceAll("\\{" + "member_reference_id" + "\\}", apiClient.escapeString(memberReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", apiClient.parameterToString(xMerchantKey));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMemberValidateBeforeCall(String memberReferenceId, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling deleteMember(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteMemberCall(memberReferenceId, xMerchantKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a member
     * This API is called when an existing member opts out of MLC. All information related to the member is deleted whenever this API is called.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMember(String memberReferenceId, String xMerchantKey) throws ApiException {
        deleteMemberWithHttpInfo(memberReferenceId, xMerchantKey);
    }

    /**
     * Delete a member
     * This API is called when an existing member opts out of MLC. All information related to the member is deleted whenever this API is called.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMemberWithHttpInfo(String memberReferenceId, String xMerchantKey) throws ApiException {
        com.squareup.okhttp.Call call = deleteMemberValidateBeforeCall(memberReferenceId, xMerchantKey, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a member (asynchronously)
     * This API is called when an existing member opts out of MLC. All information related to the member is deleted whenever this API is called.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMemberAsync(String memberReferenceId, String xMerchantKey, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMemberValidateBeforeCall(memberReferenceId, xMerchantKey, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for enrollMember
     * @param member In order to enroll a member, the partner code, user type and user ID attributes must be provided along with other optional demographic data attributes. The user type can be either &#39;BANK_CUSTOMER_NUMBER&#39; or &#39;MERCHANT_LOYALTY_ID&#39; depending on the business partner setup. (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call enrollMemberCall(Member member, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = member;

        // create path and map variables
        String localVarPath = "/members";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", apiClient.parameterToString(xMerchantKey));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call enrollMemberValidateBeforeCall(Member member, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'member' is set
        if (member == null) {
            throw new ApiException("Missing the required parameter 'member' when calling enrollMember(Async)");
        }
        

        com.squareup.okhttp.Call call = enrollMemberCall(member, xMerchantKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Enroll a member
     * Enrolls a new member in MLC. Every member is identified by the business partner (partner code) and member identifier (user id). The member may or may not provide other demographic information for enrollment.
     * @param member In order to enroll a member, the partner code, user type and user ID attributes must be provided along with other optional demographic data attributes. The user type can be either &#39;BANK_CUSTOMER_NUMBER&#39; or &#39;MERCHANT_LOYALTY_ID&#39; depending on the business partner setup. (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return MemberMerchantResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MemberMerchantResponse enrollMember(Member member, String xMerchantKey) throws ApiException {
        ApiResponse<MemberMerchantResponse> resp = enrollMemberWithHttpInfo(member, xMerchantKey);
        return resp.getData();
    }

    /**
     * Enroll a member
     * Enrolls a new member in MLC. Every member is identified by the business partner (partner code) and member identifier (user id). The member may or may not provide other demographic information for enrollment.
     * @param member In order to enroll a member, the partner code, user type and user ID attributes must be provided along with other optional demographic data attributes. The user type can be either &#39;BANK_CUSTOMER_NUMBER&#39; or &#39;MERCHANT_LOYALTY_ID&#39; depending on the business partner setup. (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;MemberMerchantResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MemberMerchantResponse> enrollMemberWithHttpInfo(Member member, String xMerchantKey) throws ApiException {
        com.squareup.okhttp.Call call = enrollMemberValidateBeforeCall(member, xMerchantKey, null, null);
        Type localVarReturnType = new TypeToken<MemberMerchantResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enroll a member (asynchronously)
     * Enrolls a new member in MLC. Every member is identified by the business partner (partner code) and member identifier (user id). The member may or may not provide other demographic information for enrollment.
     * @param member In order to enroll a member, the partner code, user type and user ID attributes must be provided along with other optional demographic data attributes. The user type can be either &#39;BANK_CUSTOMER_NUMBER&#39; or &#39;MERCHANT_LOYALTY_ID&#39; depending on the business partner setup. (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call enrollMemberAsync(Member member, String xMerchantKey, final ApiCallback<MemberMerchantResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = enrollMemberValidateBeforeCall(member, xMerchantKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MemberMerchantResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMember
     * @param memberReferenceId Unique reference key for a member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMemberCall(String memberReferenceId, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}"
            .replaceAll("\\{" + "member_reference_id" + "\\}", apiClient.escapeString(memberReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", apiClient.parameterToString(xMerchantKey));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMemberValidateBeforeCall(String memberReferenceId, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling getMember(Async)");
        }
        

        com.squareup.okhttp.Call call = getMemberCall(memberReferenceId, xMerchantKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a Member
     * Returns the demographic information related to the existing MLC Member.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return MemberResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MemberResponse getMember(String memberReferenceId, String xMerchantKey) throws ApiException {
        ApiResponse<MemberResponse> resp = getMemberWithHttpInfo(memberReferenceId, xMerchantKey);
        return resp.getData();
    }

    /**
     * Get a Member
     * Returns the demographic information related to the existing MLC Member.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;MemberResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MemberResponse> getMemberWithHttpInfo(String memberReferenceId, String xMerchantKey) throws ApiException {
        com.squareup.okhttp.Call call = getMemberValidateBeforeCall(memberReferenceId, xMerchantKey, null, null);
        Type localVarReturnType = new TypeToken<MemberResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Member (asynchronously)
     * Returns the demographic information related to the existing MLC Member.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMemberAsync(String memberReferenceId, String xMerchantKey, final ApiCallback<MemberResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMemberValidateBeforeCall(memberReferenceId, xMerchantKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MemberResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateMember
     * @param memberReferenceId Unique reference key for a member (required)
     * @param memberDetails In order to update the demographic information for a member, the unique reference key must be provided. The member must be an existing one in MLC based on the unique reference key. The member may or may not provide all demographic information for update. (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMemberCall(String memberReferenceId, MemberDetails memberDetails, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = memberDetails;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}"
            .replaceAll("\\{" + "member_reference_id" + "\\}", apiClient.escapeString(memberReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", apiClient.parameterToString(xMerchantKey));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMemberValidateBeforeCall(String memberReferenceId, MemberDetails memberDetails, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling updateMember(Async)");
        }
        
        // verify the required parameter 'memberDetails' is set
        if (memberDetails == null) {
            throw new ApiException("Missing the required parameter 'memberDetails' when calling updateMember(Async)");
        }
        

        com.squareup.okhttp.Call call = updateMemberCall(memberReferenceId, memberDetails, xMerchantKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a member
     * Updates the demographic information for an existing member in MLC. The member may or may not provide all demographic information.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param memberDetails In order to update the demographic information for a member, the unique reference key must be provided. The member must be an existing one in MLC based on the unique reference key. The member may or may not provide all demographic information for update. (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateMember(String memberReferenceId, MemberDetails memberDetails, String xMerchantKey) throws ApiException {
        updateMemberWithHttpInfo(memberReferenceId, memberDetails, xMerchantKey);
    }

    /**
     * Update a member
     * Updates the demographic information for an existing member in MLC. The member may or may not provide all demographic information.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param memberDetails In order to update the demographic information for a member, the unique reference key must be provided. The member must be an existing one in MLC based on the unique reference key. The member may or may not provide all demographic information for update. (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateMemberWithHttpInfo(String memberReferenceId, MemberDetails memberDetails, String xMerchantKey) throws ApiException {
        com.squareup.okhttp.Call call = updateMemberValidateBeforeCall(memberReferenceId, memberDetails, xMerchantKey, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a member (asynchronously)
     * Updates the demographic information for an existing member in MLC. The member may or may not provide all demographic information.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param memberDetails In order to update the demographic information for a member, the unique reference key must be provided. The member must be an existing one in MLC based on the unique reference key. The member may or may not provide all demographic information for update. (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMemberAsync(String memberReferenceId, MemberDetails memberDetails, String xMerchantKey, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMemberValidateBeforeCall(memberReferenceId, memberDetails, xMerchantKey, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}

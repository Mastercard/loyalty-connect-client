/*
 * Mastercard Loyalty Connect Service
 * Rest Service for connecting payment cards with loyalty programs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.mastercard_loyalty_connect_client.api;

import com.mastercard.developer.mastercard_loyalty_connect_client.ApiCallback;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiClient;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiException;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiResponse;
import com.mastercard.developer.mastercard_loyalty_connect_client.Configuration;
import com.mastercard.developer.mastercard_loyalty_connect_client.Pair;
import com.mastercard.developer.mastercard_loyalty_connect_client.ProgressRequestBody;
import com.mastercard.developer.mastercard_loyalty_connect_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mastercard.developer.mastercard_loyalty_connect_client.model.BusinessPartnerLocationDetails;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.BusinessPartnerLocationsResponse;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.Error;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.ServiceUnAvailableError;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.UnauthAccessError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BusinessPartnerLocationsApi {
    private ApiClient localVarApiClient;

    public BusinessPartnerLocationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BusinessPartnerLocationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createOrUpdateBusinessPartnerLocations
     * @param locationId Business Partner Location Details identification associated with payment terminal (required)
     * @param terminalId Payment Terminal Identification. (required)
     * @param businessPartnerLocationDetails Enroll a business partner location (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully enrolled business partner location </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrUpdateBusinessPartnerLocationsCall(String locationId, String terminalId, BusinessPartnerLocationDetails businessPartnerLocationDetails, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = businessPartnerLocationDetails;

        // create path and map variables
        String localVarPath = "/business-partner-locations/{location_id}/terminals/{terminal_id}"
            .replaceAll("\\{" + "location_id" + "\\}", localVarApiClient.escapeString(locationId.toString()))
            .replaceAll("\\{" + "terminal_id" + "\\}", localVarApiClient.escapeString(terminalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrUpdateBusinessPartnerLocationsValidateBeforeCall(String locationId, String terminalId, BusinessPartnerLocationDetails businessPartnerLocationDetails, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling createOrUpdateBusinessPartnerLocations(Async)");
        }
        
        // verify the required parameter 'terminalId' is set
        if (terminalId == null) {
            throw new ApiException("Missing the required parameter 'terminalId' when calling createOrUpdateBusinessPartnerLocations(Async)");
        }
        
        // verify the required parameter 'businessPartnerLocationDetails' is set
        if (businessPartnerLocationDetails == null) {
            throw new ApiException("Missing the required parameter 'businessPartnerLocationDetails' when calling createOrUpdateBusinessPartnerLocations(Async)");
        }
        

        okhttp3.Call localVarCall = createOrUpdateBusinessPartnerLocationsCall(locationId, terminalId, businessPartnerLocationDetails, _callback);
        return localVarCall;

    }

    /**
     * Store company location details
     * Store a company location into Mastercard Loyalty Connect (MLC)
     * @param locationId Business Partner Location Details identification associated with payment terminal (required)
     * @param terminalId Payment Terminal Identification. (required)
     * @param businessPartnerLocationDetails Enroll a business partner location (required)
     * @return BusinessPartnerLocationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully enrolled business partner location </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public BusinessPartnerLocationsResponse createOrUpdateBusinessPartnerLocations(String locationId, String terminalId, BusinessPartnerLocationDetails businessPartnerLocationDetails) throws ApiException {
        ApiResponse<BusinessPartnerLocationsResponse> localVarResp = createOrUpdateBusinessPartnerLocationsWithHttpInfo(locationId, terminalId, businessPartnerLocationDetails);
        return localVarResp.getData();
    }

    /**
     * Store company location details
     * Store a company location into Mastercard Loyalty Connect (MLC)
     * @param locationId Business Partner Location Details identification associated with payment terminal (required)
     * @param terminalId Payment Terminal Identification. (required)
     * @param businessPartnerLocationDetails Enroll a business partner location (required)
     * @return ApiResponse&lt;BusinessPartnerLocationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully enrolled business partner location </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessPartnerLocationsResponse> createOrUpdateBusinessPartnerLocationsWithHttpInfo(String locationId, String terminalId, BusinessPartnerLocationDetails businessPartnerLocationDetails) throws ApiException {
        okhttp3.Call localVarCall = createOrUpdateBusinessPartnerLocationsValidateBeforeCall(locationId, terminalId, businessPartnerLocationDetails, null);
        Type localVarReturnType = new TypeToken<BusinessPartnerLocationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Store company location details (asynchronously)
     * Store a company location into Mastercard Loyalty Connect (MLC)
     * @param locationId Business Partner Location Details identification associated with payment terminal (required)
     * @param terminalId Payment Terminal Identification. (required)
     * @param businessPartnerLocationDetails Enroll a business partner location (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully enrolled business partner location </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrUpdateBusinessPartnerLocationsAsync(String locationId, String terminalId, BusinessPartnerLocationDetails businessPartnerLocationDetails, final ApiCallback<BusinessPartnerLocationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrUpdateBusinessPartnerLocationsValidateBeforeCall(locationId, terminalId, businessPartnerLocationDetails, _callback);
        Type localVarReturnType = new TypeToken<BusinessPartnerLocationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

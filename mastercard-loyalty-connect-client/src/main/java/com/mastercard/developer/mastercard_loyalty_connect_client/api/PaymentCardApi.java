/*
 * Mastercard Loyalty Connect Service
 * Rest Service for linking payment cards with loyalty programme
 *
 * OpenAPI spec version: 1.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.mastercard_loyalty_connect_client.api;

import com.mastercard.developer.mastercard_loyalty_connect_client.ApiCallback;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiClient;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiException;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiResponse;
import com.mastercard.developer.mastercard_loyalty_connect_client.Configuration;
import com.mastercard.developer.mastercard_loyalty_connect_client.Pair;
import com.mastercard.developer.mastercard_loyalty_connect_client.ProgressRequestBody;
import com.mastercard.developer.mastercard_loyalty_connect_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mastercard.developer.mastercard_loyalty_connect_client.model.Error;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.PaymentCard;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.PaymentCardDetails;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.PaymentCardResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentCardApi {
    private ApiClient apiClient;

    public PaymentCardApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentCardApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deletePaymentCard
     * @param memberReferenceId Unique reference key for a member (required)
     * @param paymentCardReferenceId Unique reference key for a member&#39;s payment card (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePaymentCardCall(String memberReferenceId, String paymentCardReferenceId, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/payment-cards/{payment_card_reference_id}"
            .replaceAll("\\{" + "member_reference_id" + "\\}", apiClient.escapeString(memberReferenceId.toString()))
            .replaceAll("\\{" + "payment_card_reference_id" + "\\}", apiClient.escapeString(paymentCardReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", apiClient.parameterToString(xMerchantKey));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePaymentCardValidateBeforeCall(String memberReferenceId, String paymentCardReferenceId, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling deletePaymentCard(Async)");
        }
        
        // verify the required parameter 'paymentCardReferenceId' is set
        if (paymentCardReferenceId == null) {
            throw new ApiException("Missing the required parameter 'paymentCardReferenceId' when calling deletePaymentCard(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePaymentCardCall(memberReferenceId, paymentCardReferenceId, xMerchantKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Disconnects a payment card for a member
     * Deletes a payment card connected by the member.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param paymentCardReferenceId Unique reference key for a member&#39;s payment card (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePaymentCard(String memberReferenceId, String paymentCardReferenceId, String xMerchantKey) throws ApiException {
        deletePaymentCardWithHttpInfo(memberReferenceId, paymentCardReferenceId, xMerchantKey);
    }

    /**
     * Disconnects a payment card for a member
     * Deletes a payment card connected by the member.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param paymentCardReferenceId Unique reference key for a member&#39;s payment card (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePaymentCardWithHttpInfo(String memberReferenceId, String paymentCardReferenceId, String xMerchantKey) throws ApiException {
        com.squareup.okhttp.Call call = deletePaymentCardValidateBeforeCall(memberReferenceId, paymentCardReferenceId, xMerchantKey, null, null);
        return apiClient.execute(call);
    }

    /**
     * Disconnects a payment card for a member (asynchronously)
     * Deletes a payment card connected by the member.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param paymentCardReferenceId Unique reference key for a member&#39;s payment card (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePaymentCardAsync(String memberReferenceId, String paymentCardReferenceId, String xMerchantKey, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePaymentCardValidateBeforeCall(memberReferenceId, paymentCardReferenceId, xMerchantKey, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for enrollPaymentCard
     * @param memberReferenceId Unique reference key for a member (required)
     * @param paymentCard Contains payment card details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call enrollPaymentCardCall(String memberReferenceId, PaymentCard paymentCard, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = paymentCard;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/payment-cards"
            .replaceAll("\\{" + "member_reference_id" + "\\}", apiClient.escapeString(memberReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", apiClient.parameterToString(xMerchantKey));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call enrollPaymentCardValidateBeforeCall(String memberReferenceId, PaymentCard paymentCard, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling enrollPaymentCard(Async)");
        }
        
        // verify the required parameter 'paymentCard' is set
        if (paymentCard == null) {
            throw new ApiException("Missing the required parameter 'paymentCard' when calling enrollPaymentCard(Async)");
        }
        

        com.squareup.okhttp.Call call = enrollPaymentCardCall(memberReferenceId, paymentCard, xMerchantKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Connect payment card for a member
     * Connects payment card for an existing member.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param paymentCard Contains payment card details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return PaymentCardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaymentCardResponse enrollPaymentCard(String memberReferenceId, PaymentCard paymentCard, String xMerchantKey) throws ApiException {
        ApiResponse<PaymentCardResponse> resp = enrollPaymentCardWithHttpInfo(memberReferenceId, paymentCard, xMerchantKey);
        return resp.getData();
    }

    /**
     * Connect payment card for a member
     * Connects payment card for an existing member.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param paymentCard Contains payment card details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;PaymentCardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaymentCardResponse> enrollPaymentCardWithHttpInfo(String memberReferenceId, PaymentCard paymentCard, String xMerchantKey) throws ApiException {
        com.squareup.okhttp.Call call = enrollPaymentCardValidateBeforeCall(memberReferenceId, paymentCard, xMerchantKey, null, null);
        Type localVarReturnType = new TypeToken<PaymentCardResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Connect payment card for a member (asynchronously)
     * Connects payment card for an existing member.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param paymentCard Contains payment card details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call enrollPaymentCardAsync(String memberReferenceId, PaymentCard paymentCard, String xMerchantKey, final ApiCallback<PaymentCardResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = enrollPaymentCardValidateBeforeCall(memberReferenceId, paymentCard, xMerchantKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaymentCardResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPaymentCardDetails
     * @param memberReferenceId Unique reference key for a member (required)
     * @param paymentCardReferenceId Unique reference key for a member&#39;s payment card (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPaymentCardDetailsCall(String memberReferenceId, String paymentCardReferenceId, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/payment-cards/{payment_card_reference_id}"
            .replaceAll("\\{" + "member_reference_id" + "\\}", apiClient.escapeString(memberReferenceId.toString()))
            .replaceAll("\\{" + "payment_card_reference_id" + "\\}", apiClient.escapeString(paymentCardReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", apiClient.parameterToString(xMerchantKey));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPaymentCardDetailsValidateBeforeCall(String memberReferenceId, String paymentCardReferenceId, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling getPaymentCardDetails(Async)");
        }
        
        // verify the required parameter 'paymentCardReferenceId' is set
        if (paymentCardReferenceId == null) {
            throw new ApiException("Missing the required parameter 'paymentCardReferenceId' when calling getPaymentCardDetails(Async)");
        }
        

        com.squareup.okhttp.Call call = getPaymentCardDetailsCall(memberReferenceId, paymentCardReferenceId, xMerchantKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get payment card details for a member
     * Returns details for a specific payment card connected by the member.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param paymentCardReferenceId Unique reference key for a member&#39;s payment card (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return PaymentCardDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaymentCardDetails getPaymentCardDetails(String memberReferenceId, String paymentCardReferenceId, String xMerchantKey) throws ApiException {
        ApiResponse<PaymentCardDetails> resp = getPaymentCardDetailsWithHttpInfo(memberReferenceId, paymentCardReferenceId, xMerchantKey);
        return resp.getData();
    }

    /**
     * Get payment card details for a member
     * Returns details for a specific payment card connected by the member.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param paymentCardReferenceId Unique reference key for a member&#39;s payment card (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;PaymentCardDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaymentCardDetails> getPaymentCardDetailsWithHttpInfo(String memberReferenceId, String paymentCardReferenceId, String xMerchantKey) throws ApiException {
        com.squareup.okhttp.Call call = getPaymentCardDetailsValidateBeforeCall(memberReferenceId, paymentCardReferenceId, xMerchantKey, null, null);
        Type localVarReturnType = new TypeToken<PaymentCardDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get payment card details for a member (asynchronously)
     * Returns details for a specific payment card connected by the member.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param paymentCardReferenceId Unique reference key for a member&#39;s payment card (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPaymentCardDetailsAsync(String memberReferenceId, String paymentCardReferenceId, String xMerchantKey, final ApiCallback<PaymentCardDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPaymentCardDetailsValidateBeforeCall(memberReferenceId, paymentCardReferenceId, xMerchantKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaymentCardDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPaymentCards
     * @param memberReferenceId Unique reference key for a member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPaymentCardsCall(String memberReferenceId, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/payment-cards"
            .replaceAll("\\{" + "member_reference_id" + "\\}", apiClient.escapeString(memberReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", apiClient.parameterToString(xMerchantKey));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPaymentCardsValidateBeforeCall(String memberReferenceId, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling getPaymentCards(Async)");
        }
        

        com.squareup.okhttp.Call call = getPaymentCardsCall(memberReferenceId, xMerchantKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all payment cards for a member
     * Returns all the payment cards connected by a member.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return List&lt;PaymentCardDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PaymentCardDetails> getPaymentCards(String memberReferenceId, String xMerchantKey) throws ApiException {
        ApiResponse<List<PaymentCardDetails>> resp = getPaymentCardsWithHttpInfo(memberReferenceId, xMerchantKey);
        return resp.getData();
    }

    /**
     * Get all payment cards for a member
     * Returns all the payment cards connected by a member.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;List&lt;PaymentCardDetails&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PaymentCardDetails>> getPaymentCardsWithHttpInfo(String memberReferenceId, String xMerchantKey) throws ApiException {
        com.squareup.okhttp.Call call = getPaymentCardsValidateBeforeCall(memberReferenceId, xMerchantKey, null, null);
        Type localVarReturnType = new TypeToken<List<PaymentCardDetails>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all payment cards for a member (asynchronously)
     * Returns all the payment cards connected by a member.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPaymentCardsAsync(String memberReferenceId, String xMerchantKey, final ApiCallback<List<PaymentCardDetails>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPaymentCardsValidateBeforeCall(memberReferenceId, xMerchantKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PaymentCardDetails>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePaymentCard
     * @param memberReferenceId Unique reference key for a member (required)
     * @param paymentCardReferenceId Unique reference key for a member&#39;s payment card (required)
     * @param paymentCard Contains payment card details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePaymentCardCall(String memberReferenceId, String paymentCardReferenceId, PaymentCard paymentCard, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = paymentCard;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/payment-cards/{payment_card_reference_id}"
            .replaceAll("\\{" + "member_reference_id" + "\\}", apiClient.escapeString(memberReferenceId.toString()))
            .replaceAll("\\{" + "payment_card_reference_id" + "\\}", apiClient.escapeString(paymentCardReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", apiClient.parameterToString(xMerchantKey));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePaymentCardValidateBeforeCall(String memberReferenceId, String paymentCardReferenceId, PaymentCard paymentCard, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling updatePaymentCard(Async)");
        }
        
        // verify the required parameter 'paymentCardReferenceId' is set
        if (paymentCardReferenceId == null) {
            throw new ApiException("Missing the required parameter 'paymentCardReferenceId' when calling updatePaymentCard(Async)");
        }
        
        // verify the required parameter 'paymentCard' is set
        if (paymentCard == null) {
            throw new ApiException("Missing the required parameter 'paymentCard' when calling updatePaymentCard(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePaymentCardCall(memberReferenceId, paymentCardReferenceId, paymentCard, xMerchantKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a payment card for a member
     * Updates the details of a specific payment card connected by the member.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param paymentCardReferenceId Unique reference key for a member&#39;s payment card (required)
     * @param paymentCard Contains payment card details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updatePaymentCard(String memberReferenceId, String paymentCardReferenceId, PaymentCard paymentCard, String xMerchantKey) throws ApiException {
        updatePaymentCardWithHttpInfo(memberReferenceId, paymentCardReferenceId, paymentCard, xMerchantKey);
    }

    /**
     * Update a payment card for a member
     * Updates the details of a specific payment card connected by the member.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param paymentCardReferenceId Unique reference key for a member&#39;s payment card (required)
     * @param paymentCard Contains payment card details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updatePaymentCardWithHttpInfo(String memberReferenceId, String paymentCardReferenceId, PaymentCard paymentCard, String xMerchantKey) throws ApiException {
        com.squareup.okhttp.Call call = updatePaymentCardValidateBeforeCall(memberReferenceId, paymentCardReferenceId, paymentCard, xMerchantKey, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a payment card for a member (asynchronously)
     * Updates the details of a specific payment card connected by the member.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param paymentCardReferenceId Unique reference key for a member&#39;s payment card (required)
     * @param paymentCard Contains payment card details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePaymentCardAsync(String memberReferenceId, String paymentCardReferenceId, PaymentCard paymentCard, String xMerchantKey, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePaymentCardValidateBeforeCall(memberReferenceId, paymentCardReferenceId, paymentCard, xMerchantKey, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}

/*
 * Mastercard Loyalty Connect Service
 * Rest Service for connecting payment cards with loyalty programs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.mastercard_loyalty_connect_client.api;

import com.mastercard.developer.mastercard_loyalty_connect_client.ApiCallback;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiClient;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiException;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiResponse;
import com.mastercard.developer.mastercard_loyalty_connect_client.Configuration;
import com.mastercard.developer.mastercard_loyalty_connect_client.Pair;
import com.mastercard.developer.mastercard_loyalty_connect_client.ProgressRequestBody;
import com.mastercard.developer.mastercard_loyalty_connect_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mastercard.developer.mastercard_loyalty_connect_client.model.MemberRefIdError;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.PaymentCard;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.PaymentCardAlreadyEnrolledError;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.PaymentCardDetails;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.PaymentCardResponse;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.ServiceUnAvailableError;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.UnauthAccessError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentCardApi {
    private ApiClient localVarApiClient;

    public PaymentCardApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentCardApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deletePaymentCard
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param paymentCardReferenceId A system generated unique identifier for the Payment card enrolled for the Member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Payment card is successfully deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePaymentCardCall(String memberReferenceId, String paymentCardReferenceId, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/payment-cards/{payment_card_reference_id}"
            .replaceAll("\\{" + "member_reference_id" + "\\}", localVarApiClient.escapeString(memberReferenceId.toString()))
            .replaceAll("\\{" + "payment_card_reference_id" + "\\}", localVarApiClient.escapeString(paymentCardReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", localVarApiClient.parameterToString(xMerchantKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePaymentCardValidateBeforeCall(String memberReferenceId, String paymentCardReferenceId, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling deletePaymentCard(Async)");
        }
        
        // verify the required parameter 'paymentCardReferenceId' is set
        if (paymentCardReferenceId == null) {
            throw new ApiException("Missing the required parameter 'paymentCardReferenceId' when calling deletePaymentCard(Async)");
        }
        

        okhttp3.Call localVarCall = deletePaymentCardCall(memberReferenceId, paymentCardReferenceId, xMerchantKey, _callback);
        return localVarCall;

    }

    /**
     * Disconnects a payment card for a member
     * Deletes a payment card connected by the member.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param paymentCardReferenceId A system generated unique identifier for the Payment card enrolled for the Member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Payment card is successfully deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public void deletePaymentCard(String memberReferenceId, String paymentCardReferenceId, String xMerchantKey) throws ApiException {
        deletePaymentCardWithHttpInfo(memberReferenceId, paymentCardReferenceId, xMerchantKey);
    }

    /**
     * Disconnects a payment card for a member
     * Deletes a payment card connected by the member.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param paymentCardReferenceId A system generated unique identifier for the Payment card enrolled for the Member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Payment card is successfully deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePaymentCardWithHttpInfo(String memberReferenceId, String paymentCardReferenceId, String xMerchantKey) throws ApiException {
        okhttp3.Call localVarCall = deletePaymentCardValidateBeforeCall(memberReferenceId, paymentCardReferenceId, xMerchantKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disconnects a payment card for a member (asynchronously)
     * Deletes a payment card connected by the member.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param paymentCardReferenceId A system generated unique identifier for the Payment card enrolled for the Member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Payment card is successfully deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePaymentCardAsync(String memberReferenceId, String paymentCardReferenceId, String xMerchantKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePaymentCardValidateBeforeCall(memberReferenceId, paymentCardReferenceId, xMerchantKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enrollPaymentCard
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param paymentCard Contains payment card details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully enrolled payment card for given partner code </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Payment Card already enrolled for the member </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollPaymentCardCall(String memberReferenceId, PaymentCard paymentCard, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = paymentCard;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/payment-cards"
            .replaceAll("\\{" + "member_reference_id" + "\\}", localVarApiClient.escapeString(memberReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", localVarApiClient.parameterToString(xMerchantKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollPaymentCardValidateBeforeCall(String memberReferenceId, PaymentCard paymentCard, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling enrollPaymentCard(Async)");
        }
        
        // verify the required parameter 'paymentCard' is set
        if (paymentCard == null) {
            throw new ApiException("Missing the required parameter 'paymentCard' when calling enrollPaymentCard(Async)");
        }
        

        okhttp3.Call localVarCall = enrollPaymentCardCall(memberReferenceId, paymentCard, xMerchantKey, _callback);
        return localVarCall;

    }

    /**
     * Connect payment card for a member
     * Connects payment card for an existing member.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param paymentCard Contains payment card details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return PaymentCardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully enrolled payment card for given partner code </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Payment Card already enrolled for the member </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public PaymentCardResponse enrollPaymentCard(String memberReferenceId, PaymentCard paymentCard, String xMerchantKey) throws ApiException {
        ApiResponse<PaymentCardResponse> localVarResp = enrollPaymentCardWithHttpInfo(memberReferenceId, paymentCard, xMerchantKey);
        return localVarResp.getData();
    }

    /**
     * Connect payment card for a member
     * Connects payment card for an existing member.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param paymentCard Contains payment card details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;PaymentCardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully enrolled payment card for given partner code </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Payment Card already enrolled for the member </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentCardResponse> enrollPaymentCardWithHttpInfo(String memberReferenceId, PaymentCard paymentCard, String xMerchantKey) throws ApiException {
        okhttp3.Call localVarCall = enrollPaymentCardValidateBeforeCall(memberReferenceId, paymentCard, xMerchantKey, null);
        Type localVarReturnType = new TypeToken<PaymentCardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Connect payment card for a member (asynchronously)
     * Connects payment card for an existing member.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param paymentCard Contains payment card details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully enrolled payment card for given partner code </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Payment Card already enrolled for the member </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollPaymentCardAsync(String memberReferenceId, PaymentCard paymentCard, String xMerchantKey, final ApiCallback<PaymentCardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollPaymentCardValidateBeforeCall(memberReferenceId, paymentCard, xMerchantKey, _callback);
        Type localVarReturnType = new TypeToken<PaymentCardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentCardDetails
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param paymentCardReferenceId A system generated unique identifier for the Payment card enrolled for the Member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment Card successfully fetched </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentCardDetailsCall(String memberReferenceId, String paymentCardReferenceId, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/payment-cards/{payment_card_reference_id}"
            .replaceAll("\\{" + "member_reference_id" + "\\}", localVarApiClient.escapeString(memberReferenceId.toString()))
            .replaceAll("\\{" + "payment_card_reference_id" + "\\}", localVarApiClient.escapeString(paymentCardReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", localVarApiClient.parameterToString(xMerchantKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentCardDetailsValidateBeforeCall(String memberReferenceId, String paymentCardReferenceId, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling getPaymentCardDetails(Async)");
        }
        
        // verify the required parameter 'paymentCardReferenceId' is set
        if (paymentCardReferenceId == null) {
            throw new ApiException("Missing the required parameter 'paymentCardReferenceId' when calling getPaymentCardDetails(Async)");
        }
        

        okhttp3.Call localVarCall = getPaymentCardDetailsCall(memberReferenceId, paymentCardReferenceId, xMerchantKey, _callback);
        return localVarCall;

    }

    /**
     * Get payment card details for a member
     * Returns details for a specific payment card connected by the member.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param paymentCardReferenceId A system generated unique identifier for the Payment card enrolled for the Member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return PaymentCardDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment Card successfully fetched </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public PaymentCardDetails getPaymentCardDetails(String memberReferenceId, String paymentCardReferenceId, String xMerchantKey) throws ApiException {
        ApiResponse<PaymentCardDetails> localVarResp = getPaymentCardDetailsWithHttpInfo(memberReferenceId, paymentCardReferenceId, xMerchantKey);
        return localVarResp.getData();
    }

    /**
     * Get payment card details for a member
     * Returns details for a specific payment card connected by the member.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param paymentCardReferenceId A system generated unique identifier for the Payment card enrolled for the Member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;PaymentCardDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment Card successfully fetched </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentCardDetails> getPaymentCardDetailsWithHttpInfo(String memberReferenceId, String paymentCardReferenceId, String xMerchantKey) throws ApiException {
        okhttp3.Call localVarCall = getPaymentCardDetailsValidateBeforeCall(memberReferenceId, paymentCardReferenceId, xMerchantKey, null);
        Type localVarReturnType = new TypeToken<PaymentCardDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get payment card details for a member (asynchronously)
     * Returns details for a specific payment card connected by the member.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param paymentCardReferenceId A system generated unique identifier for the Payment card enrolled for the Member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment Card successfully fetched </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentCardDetailsAsync(String memberReferenceId, String paymentCardReferenceId, String xMerchantKey, final ApiCallback<PaymentCardDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentCardDetailsValidateBeforeCall(memberReferenceId, paymentCardReferenceId, xMerchantKey, _callback);
        Type localVarReturnType = new TypeToken<PaymentCardDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentCards
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment Cards successfully fetched </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentCardsCall(String memberReferenceId, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/payment-cards"
            .replaceAll("\\{" + "member_reference_id" + "\\}", localVarApiClient.escapeString(memberReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", localVarApiClient.parameterToString(xMerchantKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentCardsValidateBeforeCall(String memberReferenceId, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling getPaymentCards(Async)");
        }
        

        okhttp3.Call localVarCall = getPaymentCardsCall(memberReferenceId, xMerchantKey, _callback);
        return localVarCall;

    }

    /**
     * Get all payment cards for a member
     * Returns all the payment cards connected by a member.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return List&lt;PaymentCardDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment Cards successfully fetched </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public List<PaymentCardDetails> getPaymentCards(String memberReferenceId, String xMerchantKey) throws ApiException {
        ApiResponse<List<PaymentCardDetails>> localVarResp = getPaymentCardsWithHttpInfo(memberReferenceId, xMerchantKey);
        return localVarResp.getData();
    }

    /**
     * Get all payment cards for a member
     * Returns all the payment cards connected by a member.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;List&lt;PaymentCardDetails&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment Cards successfully fetched </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PaymentCardDetails>> getPaymentCardsWithHttpInfo(String memberReferenceId, String xMerchantKey) throws ApiException {
        okhttp3.Call localVarCall = getPaymentCardsValidateBeforeCall(memberReferenceId, xMerchantKey, null);
        Type localVarReturnType = new TypeToken<List<PaymentCardDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all payment cards for a member (asynchronously)
     * Returns all the payment cards connected by a member.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment Cards successfully fetched </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentCardsAsync(String memberReferenceId, String xMerchantKey, final ApiCallback<List<PaymentCardDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentCardsValidateBeforeCall(memberReferenceId, xMerchantKey, _callback);
        Type localVarReturnType = new TypeToken<List<PaymentCardDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePaymentCard
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param paymentCardReferenceId A system generated unique identifier for the Payment card enrolled for the Member (required)
     * @param paymentCard Contains payment card details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment Card is successfully updated </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePaymentCardCall(String memberReferenceId, String paymentCardReferenceId, PaymentCard paymentCard, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = paymentCard;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/payment-cards/{payment_card_reference_id}"
            .replaceAll("\\{" + "member_reference_id" + "\\}", localVarApiClient.escapeString(memberReferenceId.toString()))
            .replaceAll("\\{" + "payment_card_reference_id" + "\\}", localVarApiClient.escapeString(paymentCardReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", localVarApiClient.parameterToString(xMerchantKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePaymentCardValidateBeforeCall(String memberReferenceId, String paymentCardReferenceId, PaymentCard paymentCard, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling updatePaymentCard(Async)");
        }
        
        // verify the required parameter 'paymentCardReferenceId' is set
        if (paymentCardReferenceId == null) {
            throw new ApiException("Missing the required parameter 'paymentCardReferenceId' when calling updatePaymentCard(Async)");
        }
        
        // verify the required parameter 'paymentCard' is set
        if (paymentCard == null) {
            throw new ApiException("Missing the required parameter 'paymentCard' when calling updatePaymentCard(Async)");
        }
        

        okhttp3.Call localVarCall = updatePaymentCardCall(memberReferenceId, paymentCardReferenceId, paymentCard, xMerchantKey, _callback);
        return localVarCall;

    }

    /**
     * Update a payment card for a member
     * Updates the details of a specific payment card connected by the member.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param paymentCardReferenceId A system generated unique identifier for the Payment card enrolled for the Member (required)
     * @param paymentCard Contains payment card details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment Card is successfully updated </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public void updatePaymentCard(String memberReferenceId, String paymentCardReferenceId, PaymentCard paymentCard, String xMerchantKey) throws ApiException {
        updatePaymentCardWithHttpInfo(memberReferenceId, paymentCardReferenceId, paymentCard, xMerchantKey);
    }

    /**
     * Update a payment card for a member
     * Updates the details of a specific payment card connected by the member.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param paymentCardReferenceId A system generated unique identifier for the Payment card enrolled for the Member (required)
     * @param paymentCard Contains payment card details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment Card is successfully updated </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updatePaymentCardWithHttpInfo(String memberReferenceId, String paymentCardReferenceId, PaymentCard paymentCard, String xMerchantKey) throws ApiException {
        okhttp3.Call localVarCall = updatePaymentCardValidateBeforeCall(memberReferenceId, paymentCardReferenceId, paymentCard, xMerchantKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a payment card for a member (asynchronously)
     * Updates the details of a specific payment card connected by the member.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param paymentCardReferenceId A system generated unique identifier for the Payment card enrolled for the Member (required)
     * @param paymentCard Contains payment card details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment Card is successfully updated </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePaymentCardAsync(String memberReferenceId, String paymentCardReferenceId, PaymentCard paymentCard, String xMerchantKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePaymentCardValidateBeforeCall(memberReferenceId, paymentCardReferenceId, paymentCard, xMerchantKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}

/*
 * Mastercard Loyalty Connect Service
 * Rest Service for linking payment cards with loyalty programme
 *
 * OpenAPI spec version: 1.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.mastercard_loyalty_connect_client.api;

import com.mastercard.developer.mastercard_loyalty_connect_client.ApiCallback;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiClient;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiException;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiResponse;
import com.mastercard.developer.mastercard_loyalty_connect_client.Configuration;
import com.mastercard.developer.mastercard_loyalty_connect_client.Pair;
import com.mastercard.developer.mastercard_loyalty_connect_client.ProgressRequestBody;
import com.mastercard.developer.mastercard_loyalty_connect_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mastercard.developer.mastercard_loyalty_connect_client.model.EnrollLoyaltyConnectResponse;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.Error;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.LoyaltyConnect;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.LoyaltyConnectResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LoyaltyConnectApi {
    private ApiClient apiClient;

    public LoyaltyConnectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LoyaltyConnectApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteLoyaltyConnect
     * @param memberReferenceId Unique reference key for a member (required)
     * @param loyaltyConnectReferenceId Unique reference key for the connection of a loyalty ID and payment card (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLoyaltyConnectCall(String memberReferenceId, String loyaltyConnectReferenceId, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/loyalty-connects/{loyalty_connect_reference_id}"
            .replaceAll("\\{" + "member_reference_id" + "\\}", apiClient.escapeString(memberReferenceId.toString()))
            .replaceAll("\\{" + "loyalty_connect_reference_id" + "\\}", apiClient.escapeString(loyaltyConnectReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", apiClient.parameterToString(xMerchantKey));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLoyaltyConnectValidateBeforeCall(String memberReferenceId, String loyaltyConnectReferenceId, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling deleteLoyaltyConnect(Async)");
        }
        
        // verify the required parameter 'loyaltyConnectReferenceId' is set
        if (loyaltyConnectReferenceId == null) {
            throw new ApiException("Missing the required parameter 'loyaltyConnectReferenceId' when calling deleteLoyaltyConnect(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLoyaltyConnectCall(memberReferenceId, loyaltyConnectReferenceId, xMerchantKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Disconnects a specific payment card and Loyalty ID for a member
     * Delete a specific Loyalty ID and payment card connection for a member based on the unique reference key for the connection.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param loyaltyConnectReferenceId Unique reference key for the connection of a loyalty ID and payment card (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLoyaltyConnect(String memberReferenceId, String loyaltyConnectReferenceId, String xMerchantKey) throws ApiException {
        deleteLoyaltyConnectWithHttpInfo(memberReferenceId, loyaltyConnectReferenceId, xMerchantKey);
    }

    /**
     * Disconnects a specific payment card and Loyalty ID for a member
     * Delete a specific Loyalty ID and payment card connection for a member based on the unique reference key for the connection.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param loyaltyConnectReferenceId Unique reference key for the connection of a loyalty ID and payment card (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLoyaltyConnectWithHttpInfo(String memberReferenceId, String loyaltyConnectReferenceId, String xMerchantKey) throws ApiException {
        com.squareup.okhttp.Call call = deleteLoyaltyConnectValidateBeforeCall(memberReferenceId, loyaltyConnectReferenceId, xMerchantKey, null, null);
        return apiClient.execute(call);
    }

    /**
     * Disconnects a specific payment card and Loyalty ID for a member (asynchronously)
     * Delete a specific Loyalty ID and payment card connection for a member based on the unique reference key for the connection.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param loyaltyConnectReferenceId Unique reference key for the connection of a loyalty ID and payment card (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLoyaltyConnectAsync(String memberReferenceId, String loyaltyConnectReferenceId, String xMerchantKey, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLoyaltyConnectValidateBeforeCall(memberReferenceId, loyaltyConnectReferenceId, xMerchantKey, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for enrollLoyaltyConnect
     * @param memberReferenceId Unique reference key for a member (required)
     * @param loyaltyConnect Contains payment card and loyalty program details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call enrollLoyaltyConnectCall(String memberReferenceId, LoyaltyConnect loyaltyConnect, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = loyaltyConnect;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/loyalty-connects"
            .replaceAll("\\{" + "member_reference_id" + "\\}", apiClient.escapeString(memberReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", apiClient.parameterToString(xMerchantKey));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call enrollLoyaltyConnectValidateBeforeCall(String memberReferenceId, LoyaltyConnect loyaltyConnect, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling enrollLoyaltyConnect(Async)");
        }
        
        // verify the required parameter 'loyaltyConnect' is set
        if (loyaltyConnect == null) {
            throw new ApiException("Missing the required parameter 'loyaltyConnect' when calling enrollLoyaltyConnect(Async)");
        }
        

        com.squareup.okhttp.Call call = enrollLoyaltyConnectCall(memberReferenceId, loyaltyConnect, xMerchantKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Connects payment card and Loyalty ID for a member
     * Connects a member&#39;s payment card with Loyalty ID. The member must have the payment card and Loyalty ID enrolled before making this connection.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param loyaltyConnect Contains payment card and loyalty program details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return EnrollLoyaltyConnectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EnrollLoyaltyConnectResponse enrollLoyaltyConnect(String memberReferenceId, LoyaltyConnect loyaltyConnect, String xMerchantKey) throws ApiException {
        ApiResponse<EnrollLoyaltyConnectResponse> resp = enrollLoyaltyConnectWithHttpInfo(memberReferenceId, loyaltyConnect, xMerchantKey);
        return resp.getData();
    }

    /**
     * Connects payment card and Loyalty ID for a member
     * Connects a member&#39;s payment card with Loyalty ID. The member must have the payment card and Loyalty ID enrolled before making this connection.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param loyaltyConnect Contains payment card and loyalty program details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;EnrollLoyaltyConnectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EnrollLoyaltyConnectResponse> enrollLoyaltyConnectWithHttpInfo(String memberReferenceId, LoyaltyConnect loyaltyConnect, String xMerchantKey) throws ApiException {
        com.squareup.okhttp.Call call = enrollLoyaltyConnectValidateBeforeCall(memberReferenceId, loyaltyConnect, xMerchantKey, null, null);
        Type localVarReturnType = new TypeToken<EnrollLoyaltyConnectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Connects payment card and Loyalty ID for a member (asynchronously)
     * Connects a member&#39;s payment card with Loyalty ID. The member must have the payment card and Loyalty ID enrolled before making this connection.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param loyaltyConnect Contains payment card and loyalty program details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call enrollLoyaltyConnectAsync(String memberReferenceId, LoyaltyConnect loyaltyConnect, String xMerchantKey, final ApiCallback<EnrollLoyaltyConnectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = enrollLoyaltyConnectValidateBeforeCall(memberReferenceId, loyaltyConnect, xMerchantKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EnrollLoyaltyConnectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLoyaltyConnect
     * @param memberReferenceId Unique reference key for a member (required)
     * @param loyaltyConnectReferenceId Unique reference key for the connection of a loyalty ID and payment card (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLoyaltyConnectCall(String memberReferenceId, String loyaltyConnectReferenceId, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/loyalty-connects/{loyalty_connect_reference_id}"
            .replaceAll("\\{" + "member_reference_id" + "\\}", apiClient.escapeString(memberReferenceId.toString()))
            .replaceAll("\\{" + "loyalty_connect_reference_id" + "\\}", apiClient.escapeString(loyaltyConnectReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", apiClient.parameterToString(xMerchantKey));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLoyaltyConnectValidateBeforeCall(String memberReferenceId, String loyaltyConnectReferenceId, String xMerchantKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling getLoyaltyConnect(Async)");
        }
        
        // verify the required parameter 'loyaltyConnectReferenceId' is set
        if (loyaltyConnectReferenceId == null) {
            throw new ApiException("Missing the required parameter 'loyaltyConnectReferenceId' when calling getLoyaltyConnect(Async)");
        }
        

        com.squareup.okhttp.Call call = getLoyaltyConnectCall(memberReferenceId, loyaltyConnectReferenceId, xMerchantKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a specific Loyalty ID and payment card connection details for a member
     * Returns the Loyalty ID and payment card details for a member if the Loyalty ID exists as connected with the payment card based on the unique reference key for the connection.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param loyaltyConnectReferenceId Unique reference key for the connection of a loyalty ID and payment card (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return LoyaltyConnectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltyConnectResponse getLoyaltyConnect(String memberReferenceId, String loyaltyConnectReferenceId, String xMerchantKey) throws ApiException {
        ApiResponse<LoyaltyConnectResponse> resp = getLoyaltyConnectWithHttpInfo(memberReferenceId, loyaltyConnectReferenceId, xMerchantKey);
        return resp.getData();
    }

    /**
     * Get a specific Loyalty ID and payment card connection details for a member
     * Returns the Loyalty ID and payment card details for a member if the Loyalty ID exists as connected with the payment card based on the unique reference key for the connection.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param loyaltyConnectReferenceId Unique reference key for the connection of a loyalty ID and payment card (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;LoyaltyConnectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltyConnectResponse> getLoyaltyConnectWithHttpInfo(String memberReferenceId, String loyaltyConnectReferenceId, String xMerchantKey) throws ApiException {
        com.squareup.okhttp.Call call = getLoyaltyConnectValidateBeforeCall(memberReferenceId, loyaltyConnectReferenceId, xMerchantKey, null, null);
        Type localVarReturnType = new TypeToken<LoyaltyConnectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a specific Loyalty ID and payment card connection details for a member (asynchronously)
     * Returns the Loyalty ID and payment card details for a member if the Loyalty ID exists as connected with the payment card based on the unique reference key for the connection.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param loyaltyConnectReferenceId Unique reference key for the connection of a loyalty ID and payment card (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLoyaltyConnectAsync(String memberReferenceId, String loyaltyConnectReferenceId, String xMerchantKey, final ApiCallback<LoyaltyConnectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLoyaltyConnectValidateBeforeCall(memberReferenceId, loyaltyConnectReferenceId, xMerchantKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LoyaltyConnectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLoyaltyConnects
     * @param memberReferenceId Unique reference key for a member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param memberMerchantReferenceId Unique reference key that identifies member and merchant loyalty program association (optional, default to &quot;3ed6cfa1-f7d9-40ba-9a86-d443ad302ad0&quot;)
     * @param paymentCardReferenceId Unique reference key for a member&#39;s payment card (optional, default to &quot;5f0d07c1-6fc4-4e74-9152-0e20bb7104d9&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLoyaltyConnectsCall(String memberReferenceId, String xMerchantKey, String memberMerchantReferenceId, String paymentCardReferenceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/loyalty-connects"
            .replaceAll("\\{" + "member_reference_id" + "\\}", apiClient.escapeString(memberReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (memberMerchantReferenceId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("member_merchant_reference_id", memberMerchantReferenceId));
        }

        if (paymentCardReferenceId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("payment_card_reference_id", paymentCardReferenceId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", apiClient.parameterToString(xMerchantKey));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLoyaltyConnectsValidateBeforeCall(String memberReferenceId, String xMerchantKey, String memberMerchantReferenceId, String paymentCardReferenceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling getLoyaltyConnects(Async)");
        }
        

        com.squareup.okhttp.Call call = getLoyaltyConnectsCall(memberReferenceId, xMerchantKey, memberMerchantReferenceId, paymentCardReferenceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get payment card and Loyalty ID connection details for a member
     * Returns all payment card and Loyalty ID connections for the member. If the member wants to view the payment cards connected for a specific Loyalty ID, then the member merchant reference key must be provided. If the member wants to view the Loyalty IDs connected for a specific payment card, then the payment card reference key must be provided.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param memberMerchantReferenceId Unique reference key that identifies member and merchant loyalty program association (optional, default to &quot;3ed6cfa1-f7d9-40ba-9a86-d443ad302ad0&quot;)
     * @param paymentCardReferenceId Unique reference key for a member&#39;s payment card (optional, default to &quot;5f0d07c1-6fc4-4e74-9152-0e20bb7104d9&quot;)
     * @return List&lt;LoyaltyConnectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LoyaltyConnectResponse> getLoyaltyConnects(String memberReferenceId, String xMerchantKey, String memberMerchantReferenceId, String paymentCardReferenceId) throws ApiException {
        ApiResponse<List<LoyaltyConnectResponse>> resp = getLoyaltyConnectsWithHttpInfo(memberReferenceId, xMerchantKey, memberMerchantReferenceId, paymentCardReferenceId);
        return resp.getData();
    }

    /**
     * Get payment card and Loyalty ID connection details for a member
     * Returns all payment card and Loyalty ID connections for the member. If the member wants to view the payment cards connected for a specific Loyalty ID, then the member merchant reference key must be provided. If the member wants to view the Loyalty IDs connected for a specific payment card, then the payment card reference key must be provided.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param memberMerchantReferenceId Unique reference key that identifies member and merchant loyalty program association (optional, default to &quot;3ed6cfa1-f7d9-40ba-9a86-d443ad302ad0&quot;)
     * @param paymentCardReferenceId Unique reference key for a member&#39;s payment card (optional, default to &quot;5f0d07c1-6fc4-4e74-9152-0e20bb7104d9&quot;)
     * @return ApiResponse&lt;List&lt;LoyaltyConnectResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LoyaltyConnectResponse>> getLoyaltyConnectsWithHttpInfo(String memberReferenceId, String xMerchantKey, String memberMerchantReferenceId, String paymentCardReferenceId) throws ApiException {
        com.squareup.okhttp.Call call = getLoyaltyConnectsValidateBeforeCall(memberReferenceId, xMerchantKey, memberMerchantReferenceId, paymentCardReferenceId, null, null);
        Type localVarReturnType = new TypeToken<List<LoyaltyConnectResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get payment card and Loyalty ID connection details for a member (asynchronously)
     * Returns all payment card and Loyalty ID connections for the member. If the member wants to view the payment cards connected for a specific Loyalty ID, then the member merchant reference key must be provided. If the member wants to view the Loyalty IDs connected for a specific payment card, then the payment card reference key must be provided.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param memberMerchantReferenceId Unique reference key that identifies member and merchant loyalty program association (optional, default to &quot;3ed6cfa1-f7d9-40ba-9a86-d443ad302ad0&quot;)
     * @param paymentCardReferenceId Unique reference key for a member&#39;s payment card (optional, default to &quot;5f0d07c1-6fc4-4e74-9152-0e20bb7104d9&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLoyaltyConnectsAsync(String memberReferenceId, String xMerchantKey, String memberMerchantReferenceId, String paymentCardReferenceId, final ApiCallback<List<LoyaltyConnectResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLoyaltyConnectsValidateBeforeCall(memberReferenceId, xMerchantKey, memberMerchantReferenceId, paymentCardReferenceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LoyaltyConnectResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

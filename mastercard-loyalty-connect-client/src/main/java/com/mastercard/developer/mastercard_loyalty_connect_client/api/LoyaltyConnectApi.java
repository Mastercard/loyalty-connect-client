/*
 * Mastercard Loyalty Connect Service
 * Connecting payment and retail loyalty into a single checkout experience
 *
 * The version of the OpenAPI document: 2.2.1
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.mastercard_loyalty_connect_client.api;

import com.google.gson.reflect.TypeToken;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiCallback;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiClient;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiException;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiResponse;
import com.mastercard.developer.mastercard_loyalty_connect_client.Configuration;
import com.mastercard.developer.mastercard_loyalty_connect_client.Pair;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.EnrollLoyaltyConnectResponse;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.LoyaltyConnect;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.LoyaltyConnectResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LoyaltyConnectApi {
    private ApiClient localVarApiClient;

    public LoyaltyConnectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LoyaltyConnectApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteLoyaltyConnect
     *
     * @param xMerchantKey              Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (required)
     * @param memberReferenceId         Unique reference key for a member (required)
     * @param loyaltyConnectReferenceId Unique reference key for the connection of a loyalty ID and payment card (required)
     * @param _callback                 Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 202 </td><td> Loyalty Connect successfully deleted </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteLoyaltyConnectCall(String xMerchantKey, String memberReferenceId, String loyaltyConnectReferenceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/loyalty-connects/{loyalty_connect_reference_id}"
                .replaceAll("\\{" + "member_reference_id" + "\\}", localVarApiClient.escapeString(memberReferenceId.toString()))
                .replaceAll("\\{" + "loyalty_connect_reference_id" + "\\}", localVarApiClient.escapeString(loyaltyConnectReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", localVarApiClient.parameterToString(xMerchantKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLoyaltyConnectValidateBeforeCall(String xMerchantKey, String memberReferenceId, String loyaltyConnectReferenceId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'xMerchantKey' is set
        if (xMerchantKey == null) {
            throw new ApiException("Missing the required parameter 'xMerchantKey' when calling deleteLoyaltyConnect(Async)");
        }

        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling deleteLoyaltyConnect(Async)");
        }

        // verify the required parameter 'loyaltyConnectReferenceId' is set
        if (loyaltyConnectReferenceId == null) {
            throw new ApiException("Missing the required parameter 'loyaltyConnectReferenceId' when calling deleteLoyaltyConnect(Async)");
        }


        okhttp3.Call localVarCall = deleteLoyaltyConnectCall(xMerchantKey, memberReferenceId, loyaltyConnectReferenceId, _callback);
        return localVarCall;

    }

    /**
     * Disconnects a specific payment card and Loyalty ID for a member
     * Returns the Loyalty ID and payment card details for a member if the Loyalty ID exists as connected Delete a specific Loyalty ID and payment card connection for a member based on the unique reference key for the connection.
     *
     * @param xMerchantKey              Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (required)
     * @param memberReferenceId         Unique reference key for a member (required)
     * @param loyaltyConnectReferenceId Unique reference key for the connection of a loyalty ID and payment card (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 202 </td><td> Loyalty Connect successfully deleted </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     * </table>
     */
    public void deleteLoyaltyConnect(String xMerchantKey, String memberReferenceId, String loyaltyConnectReferenceId) throws ApiException {
        deleteLoyaltyConnectWithHttpInfo(xMerchantKey, memberReferenceId, loyaltyConnectReferenceId);
    }

    /**
     * Disconnects a specific payment card and Loyalty ID for a member
     * Returns the Loyalty ID and payment card details for a member if the Loyalty ID exists as connected Delete a specific Loyalty ID and payment card connection for a member based on the unique reference key for the connection.
     *
     * @param xMerchantKey              Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (required)
     * @param memberReferenceId         Unique reference key for a member (required)
     * @param loyaltyConnectReferenceId Unique reference key for the connection of a loyalty ID and payment card (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 202 </td><td> Loyalty Connect successfully deleted </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> deleteLoyaltyConnectWithHttpInfo(String xMerchantKey, String memberReferenceId, String loyaltyConnectReferenceId) throws ApiException {
        okhttp3.Call localVarCall = deleteLoyaltyConnectValidateBeforeCall(xMerchantKey, memberReferenceId, loyaltyConnectReferenceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disconnects a specific payment card and Loyalty ID for a member (asynchronously)
     * Returns the Loyalty ID and payment card details for a member if the Loyalty ID exists as connected Delete a specific Loyalty ID and payment card connection for a member based on the unique reference key for the connection.
     *
     * @param xMerchantKey              Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (required)
     * @param memberReferenceId         Unique reference key for a member (required)
     * @param loyaltyConnectReferenceId Unique reference key for the connection of a loyalty ID and payment card (required)
     * @param _callback                 The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 202 </td><td> Loyalty Connect successfully deleted </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteLoyaltyConnectAsync(String xMerchantKey, String memberReferenceId, String loyaltyConnectReferenceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLoyaltyConnectValidateBeforeCall(xMerchantKey, memberReferenceId, loyaltyConnectReferenceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for enrollLoyaltyConnect
     *
     * @param memberReferenceId Unique reference key for a member (required)
     * @param loyaltyConnect    Contains payment card and loyalty program details (required)
     * @param xMerchantKey      Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional)
     * @param _callback         Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Successfully connected payment card to loyalty </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call enrollLoyaltyConnectCall(String memberReferenceId, LoyaltyConnect loyaltyConnect, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = loyaltyConnect;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/loyalty-connects"
                .replaceAll("\\{" + "member_reference_id" + "\\}", localVarApiClient.escapeString(memberReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", localVarApiClient.parameterToString(xMerchantKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollLoyaltyConnectValidateBeforeCall(String memberReferenceId, LoyaltyConnect loyaltyConnect, String xMerchantKey, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling enrollLoyaltyConnect(Async)");
        }

        // verify the required parameter 'loyaltyConnect' is set
        if (loyaltyConnect == null) {
            throw new ApiException("Missing the required parameter 'loyaltyConnect' when calling enrollLoyaltyConnect(Async)");
        }


        okhttp3.Call localVarCall = enrollLoyaltyConnectCall(memberReferenceId, loyaltyConnect, xMerchantKey, _callback);
        return localVarCall;

    }

    /**
     * Connects payment card and Loyalty ID for a member
     * Connects a member&#39;s payment card with Loyalty ID. The member must have the payment card and Loyalty ID enrolled before making this connection.
     *
     * @param memberReferenceId Unique reference key for a member (required)
     * @param loyaltyConnect    Contains payment card and loyalty program details (required)
     * @param xMerchantKey      Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional)
     * @return EnrollLoyaltyConnectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Successfully connected payment card to loyalty </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     * </table>
     */
    public EnrollLoyaltyConnectResponse enrollLoyaltyConnect(String memberReferenceId, LoyaltyConnect loyaltyConnect, String xMerchantKey) throws ApiException {
        ApiResponse<EnrollLoyaltyConnectResponse> localVarResp = enrollLoyaltyConnectWithHttpInfo(memberReferenceId, loyaltyConnect, xMerchantKey);
        return localVarResp.getData();
    }

    /**
     * Connects payment card and Loyalty ID for a member
     * Connects a member&#39;s payment card with Loyalty ID. The member must have the payment card and Loyalty ID enrolled before making this connection.
     *
     * @param memberReferenceId Unique reference key for a member (required)
     * @param loyaltyConnect    Contains payment card and loyalty program details (required)
     * @param xMerchantKey      Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional)
     * @return ApiResponse&lt;EnrollLoyaltyConnectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Successfully connected payment card to loyalty </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<EnrollLoyaltyConnectResponse> enrollLoyaltyConnectWithHttpInfo(String memberReferenceId, LoyaltyConnect loyaltyConnect, String xMerchantKey) throws ApiException {
        okhttp3.Call localVarCall = enrollLoyaltyConnectValidateBeforeCall(memberReferenceId, loyaltyConnect, xMerchantKey, null);
        Type localVarReturnType = new TypeToken<EnrollLoyaltyConnectResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Connects payment card and Loyalty ID for a member (asynchronously)
     * Connects a member&#39;s payment card with Loyalty ID. The member must have the payment card and Loyalty ID enrolled before making this connection.
     *
     * @param memberReferenceId Unique reference key for a member (required)
     * @param loyaltyConnect    Contains payment card and loyalty program details (required)
     * @param xMerchantKey      Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional)
     * @param _callback         The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Successfully connected payment card to loyalty </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call enrollLoyaltyConnectAsync(String memberReferenceId, LoyaltyConnect loyaltyConnect, String xMerchantKey, final ApiCallback<EnrollLoyaltyConnectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollLoyaltyConnectValidateBeforeCall(memberReferenceId, loyaltyConnect, xMerchantKey, _callback);
        Type localVarReturnType = new TypeToken<EnrollLoyaltyConnectResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getLoyaltyConnect
     *
     * @param xMerchantKey              Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (required)
     * @param memberReferenceId         Unique reference key for a member (required)
     * @param loyaltyConnectReferenceId Unique reference key for the connection of a loyalty ID and payment card (required)
     * @param _callback                 Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Loyalty Connect is successfully fetched </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getLoyaltyConnectCall(String xMerchantKey, String memberReferenceId, String loyaltyConnectReferenceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/loyalty-connects/{loyalty_connect_reference_id}"
                .replaceAll("\\{" + "member_reference_id" + "\\}", localVarApiClient.escapeString(memberReferenceId.toString()))
                .replaceAll("\\{" + "loyalty_connect_reference_id" + "\\}", localVarApiClient.escapeString(loyaltyConnectReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", localVarApiClient.parameterToString(xMerchantKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoyaltyConnectValidateBeforeCall(String xMerchantKey, String memberReferenceId, String loyaltyConnectReferenceId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'xMerchantKey' is set
        if (xMerchantKey == null) {
            throw new ApiException("Missing the required parameter 'xMerchantKey' when calling getLoyaltyConnect(Async)");
        }

        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling getLoyaltyConnect(Async)");
        }

        // verify the required parameter 'loyaltyConnectReferenceId' is set
        if (loyaltyConnectReferenceId == null) {
            throw new ApiException("Missing the required parameter 'loyaltyConnectReferenceId' when calling getLoyaltyConnect(Async)");
        }


        okhttp3.Call localVarCall = getLoyaltyConnectCall(xMerchantKey, memberReferenceId, loyaltyConnectReferenceId, _callback);
        return localVarCall;

    }

    /**
     * Get a specific Loyalty ID and payment card connection details for a member
     * Returns the Loyalty ID and payment card details for a member if the Loyalty ID exists as connected with the payment card based on the unique reference key for the connection.
     *
     * @param xMerchantKey              Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (required)
     * @param memberReferenceId         Unique reference key for a member (required)
     * @param loyaltyConnectReferenceId Unique reference key for the connection of a loyalty ID and payment card (required)
     * @return LoyaltyConnectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Loyalty Connect is successfully fetched </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     * </table>
     */
    public LoyaltyConnectResponse getLoyaltyConnect(String xMerchantKey, String memberReferenceId, String loyaltyConnectReferenceId) throws ApiException {
        ApiResponse<LoyaltyConnectResponse> localVarResp = getLoyaltyConnectWithHttpInfo(xMerchantKey, memberReferenceId, loyaltyConnectReferenceId);
        return localVarResp.getData();
    }

    /**
     * Get a specific Loyalty ID and payment card connection details for a member
     * Returns the Loyalty ID and payment card details for a member if the Loyalty ID exists as connected with the payment card based on the unique reference key for the connection.
     *
     * @param xMerchantKey              Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (required)
     * @param memberReferenceId         Unique reference key for a member (required)
     * @param loyaltyConnectReferenceId Unique reference key for the connection of a loyalty ID and payment card (required)
     * @return ApiResponse&lt;LoyaltyConnectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Loyalty Connect is successfully fetched </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<LoyaltyConnectResponse> getLoyaltyConnectWithHttpInfo(String xMerchantKey, String memberReferenceId, String loyaltyConnectReferenceId) throws ApiException {
        okhttp3.Call localVarCall = getLoyaltyConnectValidateBeforeCall(xMerchantKey, memberReferenceId, loyaltyConnectReferenceId, null);
        Type localVarReturnType = new TypeToken<LoyaltyConnectResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific Loyalty ID and payment card connection details for a member (asynchronously)
     * Returns the Loyalty ID and payment card details for a member if the Loyalty ID exists as connected with the payment card based on the unique reference key for the connection.
     *
     * @param xMerchantKey              Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (required)
     * @param memberReferenceId         Unique reference key for a member (required)
     * @param loyaltyConnectReferenceId Unique reference key for the connection of a loyalty ID and payment card (required)
     * @param _callback                 The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Loyalty Connect is successfully fetched </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getLoyaltyConnectAsync(String xMerchantKey, String memberReferenceId, String loyaltyConnectReferenceId, final ApiCallback<LoyaltyConnectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoyaltyConnectValidateBeforeCall(xMerchantKey, memberReferenceId, loyaltyConnectReferenceId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltyConnectResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getLoyaltyConnects
     *
     * @param xMerchantKey              Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (required)
     * @param memberReferenceId         Unique reference key for a member (required)
     * @param memberMerchantReferenceId Unique reference key that identifies member and merchant loyalty program association (required)
     * @param paymentCardReferenceId    Unique reference key for a member&#39;s payment card (required)
     * @param _callback                 Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Loyalty Connects are successfully fetched </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getLoyaltyConnectsCall(String xMerchantKey, String memberReferenceId, String memberMerchantReferenceId, String paymentCardReferenceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/loyalty-connects"
                .replaceAll("\\{" + "member_reference_id" + "\\}", localVarApiClient.escapeString(memberReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (memberMerchantReferenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_merchant_reference_id", memberMerchantReferenceId));
        }

        if (paymentCardReferenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payment_card_reference_id", paymentCardReferenceId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", localVarApiClient.parameterToString(xMerchantKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoyaltyConnectsValidateBeforeCall(String xMerchantKey, String memberReferenceId, String memberMerchantReferenceId, String paymentCardReferenceId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'xMerchantKey' is set
        if (xMerchantKey == null) {
            throw new ApiException("Missing the required parameter 'xMerchantKey' when calling getLoyaltyConnects(Async)");
        }

        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling getLoyaltyConnects(Async)");
        }

        // verify the required parameter 'memberMerchantReferenceId' is set
        if (memberMerchantReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberMerchantReferenceId' when calling getLoyaltyConnects(Async)");
        }

        // verify the required parameter 'paymentCardReferenceId' is set
        if (paymentCardReferenceId == null) {
            throw new ApiException("Missing the required parameter 'paymentCardReferenceId' when calling getLoyaltyConnects(Async)");
        }


        okhttp3.Call localVarCall = getLoyaltyConnectsCall(xMerchantKey, memberReferenceId, memberMerchantReferenceId, paymentCardReferenceId, _callback);
        return localVarCall;

    }

    /**
     * Get payment card and Loyalty ID connection details for a member
     * Returns all payment card and Loyalty ID connections for the member. If the member wants to view the payment cards connected for a specific Loyalty ID, then the member merchant reference key must be provided. If the member wants to view the Loyalty IDs connected for a specific payment card, then the payment card reference key must be provided.
     *
     * @param xMerchantKey              Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (required)
     * @param memberReferenceId         Unique reference key for a member (required)
     * @param memberMerchantReferenceId Unique reference key that identifies member and merchant loyalty program association (required)
     * @param paymentCardReferenceId    Unique reference key for a member&#39;s payment card (required)
     * @return LoyaltyConnectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Loyalty Connects are successfully fetched </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     * </table>
     */
    public LoyaltyConnectResponse getLoyaltyConnects(String xMerchantKey, String memberReferenceId, String memberMerchantReferenceId, String paymentCardReferenceId) throws ApiException {
        ApiResponse<LoyaltyConnectResponse> localVarResp = getLoyaltyConnectsWithHttpInfo(xMerchantKey, memberReferenceId, memberMerchantReferenceId, paymentCardReferenceId);
        return localVarResp.getData();
    }

    /**
     * Get payment card and Loyalty ID connection details for a member
     * Returns all payment card and Loyalty ID connections for the member. If the member wants to view the payment cards connected for a specific Loyalty ID, then the member merchant reference key must be provided. If the member wants to view the Loyalty IDs connected for a specific payment card, then the payment card reference key must be provided.
     *
     * @param xMerchantKey              Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (required)
     * @param memberReferenceId         Unique reference key for a member (required)
     * @param memberMerchantReferenceId Unique reference key that identifies member and merchant loyalty program association (required)
     * @param paymentCardReferenceId    Unique reference key for a member&#39;s payment card (required)
     * @return ApiResponse&lt;LoyaltyConnectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Loyalty Connects are successfully fetched </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<LoyaltyConnectResponse> getLoyaltyConnectsWithHttpInfo(String xMerchantKey, String memberReferenceId, String memberMerchantReferenceId, String paymentCardReferenceId) throws ApiException {
        okhttp3.Call localVarCall = getLoyaltyConnectsValidateBeforeCall(xMerchantKey, memberReferenceId, memberMerchantReferenceId, paymentCardReferenceId, null);
        Type localVarReturnType = new TypeToken<LoyaltyConnectResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get payment card and Loyalty ID connection details for a member (asynchronously)
     * Returns all payment card and Loyalty ID connections for the member. If the member wants to view the payment cards connected for a specific Loyalty ID, then the member merchant reference key must be provided. If the member wants to view the Loyalty IDs connected for a specific payment card, then the payment card reference key must be provided.
     *
     * @param xMerchantKey              Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (required)
     * @param memberReferenceId         Unique reference key for a member (required)
     * @param memberMerchantReferenceId Unique reference key that identifies member and merchant loyalty program association (required)
     * @param paymentCardReferenceId    Unique reference key for a member&#39;s payment card (required)
     * @param _callback                 The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Loyalty Connects are successfully fetched </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getLoyaltyConnectsAsync(String xMerchantKey, String memberReferenceId, String memberMerchantReferenceId, String paymentCardReferenceId, final ApiCallback<LoyaltyConnectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoyaltyConnectsValidateBeforeCall(xMerchantKey, memberReferenceId, memberMerchantReferenceId, paymentCardReferenceId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltyConnectResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

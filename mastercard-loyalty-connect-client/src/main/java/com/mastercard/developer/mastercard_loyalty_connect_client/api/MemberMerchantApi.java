/*
 * Mastercard Loyalty Connect Service
 * Rest Service for connecting payment cards with loyalty programs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.mastercard_loyalty_connect_client.api;

import com.mastercard.developer.mastercard_loyalty_connect_client.ApiCallback;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiClient;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiException;
import com.mastercard.developer.mastercard_loyalty_connect_client.ApiResponse;
import com.mastercard.developer.mastercard_loyalty_connect_client.Configuration;
import com.mastercard.developer.mastercard_loyalty_connect_client.Pair;
import com.mastercard.developer.mastercard_loyalty_connect_client.ProgressRequestBody;
import com.mastercard.developer.mastercard_loyalty_connect_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mastercard.developer.mastercard_loyalty_connect_client.model.LoyaltyProgram;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.MemberMerchantAlreadyJoinedError;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.MemberMerchantLoyaltyDetails;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.MemberRefIdError;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.MerchantLoyaltyProgram;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.MerchantLoyaltyProgramResponse;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.MerchantLoyaltyProgramSearchResponse;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.ServiceUnAvailableError;
import com.mastercard.developer.mastercard_loyalty_connect_client.model.UnauthAccessError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MemberMerchantApi {
    private ApiClient localVarApiClient;

    public MemberMerchantApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MemberMerchantApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteMemberMerchantLoyaltyProgram
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param memberMerchantReferenceId A system generated unique identifier for the Member and Merchant Loyalty ID connection (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Merchant loyalty program deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMemberMerchantLoyaltyProgramCall(String memberReferenceId, String memberMerchantReferenceId, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/loyalty-programs/{member_merchant_reference_id}"
            .replaceAll("\\{" + "member_reference_id" + "\\}", localVarApiClient.escapeString(memberReferenceId.toString()))
            .replaceAll("\\{" + "member_merchant_reference_id" + "\\}", localVarApiClient.escapeString(memberMerchantReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", localVarApiClient.parameterToString(xMerchantKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMemberMerchantLoyaltyProgramValidateBeforeCall(String memberReferenceId, String memberMerchantReferenceId, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling deleteMemberMerchantLoyaltyProgram(Async)");
        }
        
        // verify the required parameter 'memberMerchantReferenceId' is set
        if (memberMerchantReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberMerchantReferenceId' when calling deleteMemberMerchantLoyaltyProgram(Async)");
        }
        

        okhttp3.Call localVarCall = deleteMemberMerchantLoyaltyProgramCall(memberReferenceId, memberMerchantReferenceId, xMerchantKey, _callback);
        return localVarCall;

    }

    /**
     * Disconnect a loyalty program for a member
     * Deletes an existing Member and Merchant Loyalty Program association
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param memberMerchantReferenceId A system generated unique identifier for the Member and Merchant Loyalty ID connection (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Merchant loyalty program deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMemberMerchantLoyaltyProgram(String memberReferenceId, String memberMerchantReferenceId, String xMerchantKey) throws ApiException {
        deleteMemberMerchantLoyaltyProgramWithHttpInfo(memberReferenceId, memberMerchantReferenceId, xMerchantKey);
    }

    /**
     * Disconnect a loyalty program for a member
     * Deletes an existing Member and Merchant Loyalty Program association
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param memberMerchantReferenceId A system generated unique identifier for the Member and Merchant Loyalty ID connection (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Merchant loyalty program deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMemberMerchantLoyaltyProgramWithHttpInfo(String memberReferenceId, String memberMerchantReferenceId, String xMerchantKey) throws ApiException {
        okhttp3.Call localVarCall = deleteMemberMerchantLoyaltyProgramValidateBeforeCall(memberReferenceId, memberMerchantReferenceId, xMerchantKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disconnect a loyalty program for a member (asynchronously)
     * Deletes an existing Member and Merchant Loyalty Program association
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param memberMerchantReferenceId A system generated unique identifier for the Member and Merchant Loyalty ID connection (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Merchant loyalty program deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMemberMerchantLoyaltyProgramAsync(String memberReferenceId, String memberMerchantReferenceId, String xMerchantKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMemberMerchantLoyaltyProgramValidateBeforeCall(memberReferenceId, memberMerchantReferenceId, xMerchantKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllMemberMerchantLoyaltyProgram
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param loyaltyId Unique Identifier assigned by Merchant to its every Member (optional, default to &quot;jsmith@mastercard.com&quot;)
     * @param merchantCode Unique Identifier assigned by Mastercard to every partner onboarded with MLC (optional, default to &quot;MLCMerchant&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully filtered merchant loyalty program </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllMemberMerchantLoyaltyProgramCall(String memberReferenceId, String xMerchantKey, String loyaltyId, String merchantCode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/loyalty-programs"
            .replaceAll("\\{" + "member_reference_id" + "\\}", localVarApiClient.escapeString(memberReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (loyaltyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loyalty_id", loyaltyId));
        }

        if (merchantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("merchant_code", merchantCode));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", localVarApiClient.parameterToString(xMerchantKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllMemberMerchantLoyaltyProgramValidateBeforeCall(String memberReferenceId, String xMerchantKey, String loyaltyId, String merchantCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling getAllMemberMerchantLoyaltyProgram(Async)");
        }
        

        okhttp3.Call localVarCall = getAllMemberMerchantLoyaltyProgramCall(memberReferenceId, xMerchantKey, loyaltyId, merchantCode, _callback);
        return localVarCall;

    }

    /**
     * Get loyalty programs for a member
     * Returns all loyalty programs in which the member is enrolled. If the member wants to view the details for a specific Merchant Loyalty program the member is enrolled in, then merchant code and Loyalty ID must be provided.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param loyaltyId Unique Identifier assigned by Merchant to its every Member (optional, default to &quot;jsmith@mastercard.com&quot;)
     * @param merchantCode Unique Identifier assigned by Mastercard to every partner onboarded with MLC (optional, default to &quot;MLCMerchant&quot;)
     * @return MerchantLoyaltyProgramSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully filtered merchant loyalty program </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public MerchantLoyaltyProgramSearchResponse getAllMemberMerchantLoyaltyProgram(String memberReferenceId, String xMerchantKey, String loyaltyId, String merchantCode) throws ApiException {
        ApiResponse<MerchantLoyaltyProgramSearchResponse> localVarResp = getAllMemberMerchantLoyaltyProgramWithHttpInfo(memberReferenceId, xMerchantKey, loyaltyId, merchantCode);
        return localVarResp.getData();
    }

    /**
     * Get loyalty programs for a member
     * Returns all loyalty programs in which the member is enrolled. If the member wants to view the details for a specific Merchant Loyalty program the member is enrolled in, then merchant code and Loyalty ID must be provided.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param loyaltyId Unique Identifier assigned by Merchant to its every Member (optional, default to &quot;jsmith@mastercard.com&quot;)
     * @param merchantCode Unique Identifier assigned by Mastercard to every partner onboarded with MLC (optional, default to &quot;MLCMerchant&quot;)
     * @return ApiResponse&lt;MerchantLoyaltyProgramSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully filtered merchant loyalty program </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantLoyaltyProgramSearchResponse> getAllMemberMerchantLoyaltyProgramWithHttpInfo(String memberReferenceId, String xMerchantKey, String loyaltyId, String merchantCode) throws ApiException {
        okhttp3.Call localVarCall = getAllMemberMerchantLoyaltyProgramValidateBeforeCall(memberReferenceId, xMerchantKey, loyaltyId, merchantCode, null);
        Type localVarReturnType = new TypeToken<MerchantLoyaltyProgramSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get loyalty programs for a member (asynchronously)
     * Returns all loyalty programs in which the member is enrolled. If the member wants to view the details for a specific Merchant Loyalty program the member is enrolled in, then merchant code and Loyalty ID must be provided.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param loyaltyId Unique Identifier assigned by Merchant to its every Member (optional, default to &quot;jsmith@mastercard.com&quot;)
     * @param merchantCode Unique Identifier assigned by Mastercard to every partner onboarded with MLC (optional, default to &quot;MLCMerchant&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully filtered merchant loyalty program </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllMemberMerchantLoyaltyProgramAsync(String memberReferenceId, String xMerchantKey, String loyaltyId, String merchantCode, final ApiCallback<MerchantLoyaltyProgramSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllMemberMerchantLoyaltyProgramValidateBeforeCall(memberReferenceId, xMerchantKey, loyaltyId, merchantCode, _callback);
        Type localVarReturnType = new TypeToken<MerchantLoyaltyProgramSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMemberMerchantLoyaltyProgram
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param memberMerchantReferenceId A system generated unique identifier for the Member and Merchant Loyalty ID connection (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Merchant loyalty program retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMemberMerchantLoyaltyProgramCall(String memberReferenceId, String memberMerchantReferenceId, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/loyalty-programs/{member_merchant_reference_id}"
            .replaceAll("\\{" + "member_reference_id" + "\\}", localVarApiClient.escapeString(memberReferenceId.toString()))
            .replaceAll("\\{" + "member_merchant_reference_id" + "\\}", localVarApiClient.escapeString(memberMerchantReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", localVarApiClient.parameterToString(xMerchantKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMemberMerchantLoyaltyProgramValidateBeforeCall(String memberReferenceId, String memberMerchantReferenceId, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling getMemberMerchantLoyaltyProgram(Async)");
        }
        
        // verify the required parameter 'memberMerchantReferenceId' is set
        if (memberMerchantReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberMerchantReferenceId' when calling getMemberMerchantLoyaltyProgram(Async)");
        }
        

        okhttp3.Call localVarCall = getMemberMerchantLoyaltyProgramCall(memberReferenceId, memberMerchantReferenceId, xMerchantKey, _callback);
        return localVarCall;

    }

    /**
     * Get details for a specific Merchant Loyalty Program
     * Returns Loyalty ID and point balance for a specific Merchant Loyalty Program associated with the member.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param memberMerchantReferenceId A system generated unique identifier for the Member and Merchant Loyalty ID connection (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return MemberMerchantLoyaltyDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Merchant loyalty program retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public MemberMerchantLoyaltyDetails getMemberMerchantLoyaltyProgram(String memberReferenceId, String memberMerchantReferenceId, String xMerchantKey) throws ApiException {
        ApiResponse<MemberMerchantLoyaltyDetails> localVarResp = getMemberMerchantLoyaltyProgramWithHttpInfo(memberReferenceId, memberMerchantReferenceId, xMerchantKey);
        return localVarResp.getData();
    }

    /**
     * Get details for a specific Merchant Loyalty Program
     * Returns Loyalty ID and point balance for a specific Merchant Loyalty Program associated with the member.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param memberMerchantReferenceId A system generated unique identifier for the Member and Merchant Loyalty ID connection (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;MemberMerchantLoyaltyDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Merchant loyalty program retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MemberMerchantLoyaltyDetails> getMemberMerchantLoyaltyProgramWithHttpInfo(String memberReferenceId, String memberMerchantReferenceId, String xMerchantKey) throws ApiException {
        okhttp3.Call localVarCall = getMemberMerchantLoyaltyProgramValidateBeforeCall(memberReferenceId, memberMerchantReferenceId, xMerchantKey, null);
        Type localVarReturnType = new TypeToken<MemberMerchantLoyaltyDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details for a specific Merchant Loyalty Program (asynchronously)
     * Returns Loyalty ID and point balance for a specific Merchant Loyalty Program associated with the member.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param memberMerchantReferenceId A system generated unique identifier for the Member and Merchant Loyalty ID connection (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Merchant loyalty program retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMemberMerchantLoyaltyProgramAsync(String memberReferenceId, String memberMerchantReferenceId, String xMerchantKey, final ApiCallback<MemberMerchantLoyaltyDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMemberMerchantLoyaltyProgramValidateBeforeCall(memberReferenceId, memberMerchantReferenceId, xMerchantKey, _callback);
        Type localVarReturnType = new TypeToken<MemberMerchantLoyaltyDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for joinOrConnectMerchantLoyaltyProgram
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param merchantLoyaltyProgram Contains merchant loyalty program details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully joined/connected in Merchant Loyalty Program </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Member has already joined/connected to merchant loyalty program </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call joinOrConnectMerchantLoyaltyProgramCall(String memberReferenceId, MerchantLoyaltyProgram merchantLoyaltyProgram, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = merchantLoyaltyProgram;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/loyalty-programs"
            .replaceAll("\\{" + "member_reference_id" + "\\}", localVarApiClient.escapeString(memberReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", localVarApiClient.parameterToString(xMerchantKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call joinOrConnectMerchantLoyaltyProgramValidateBeforeCall(String memberReferenceId, MerchantLoyaltyProgram merchantLoyaltyProgram, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling joinOrConnectMerchantLoyaltyProgram(Async)");
        }
        
        // verify the required parameter 'merchantLoyaltyProgram' is set
        if (merchantLoyaltyProgram == null) {
            throw new ApiException("Missing the required parameter 'merchantLoyaltyProgram' when calling joinOrConnectMerchantLoyaltyProgram(Async)");
        }
        

        okhttp3.Call localVarCall = joinOrConnectMerchantLoyaltyProgramCall(memberReferenceId, merchantLoyaltyProgram, xMerchantKey, _callback);
        return localVarCall;

    }

    /**
     * Enroll a member in a Merchant Loyalty Program
     * Enrolls the member in a Merchant Loyalty Program. Alternately, the member can connect an existing Loyalty ID for the Merchant Loyalty Program.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param merchantLoyaltyProgram Contains merchant loyalty program details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return MerchantLoyaltyProgramResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully joined/connected in Merchant Loyalty Program </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Member has already joined/connected to merchant loyalty program </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public MerchantLoyaltyProgramResponse joinOrConnectMerchantLoyaltyProgram(String memberReferenceId, MerchantLoyaltyProgram merchantLoyaltyProgram, String xMerchantKey) throws ApiException {
        ApiResponse<MerchantLoyaltyProgramResponse> localVarResp = joinOrConnectMerchantLoyaltyProgramWithHttpInfo(memberReferenceId, merchantLoyaltyProgram, xMerchantKey);
        return localVarResp.getData();
    }

    /**
     * Enroll a member in a Merchant Loyalty Program
     * Enrolls the member in a Merchant Loyalty Program. Alternately, the member can connect an existing Loyalty ID for the Merchant Loyalty Program.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param merchantLoyaltyProgram Contains merchant loyalty program details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;MerchantLoyaltyProgramResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully joined/connected in Merchant Loyalty Program </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Member has already joined/connected to merchant loyalty program </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantLoyaltyProgramResponse> joinOrConnectMerchantLoyaltyProgramWithHttpInfo(String memberReferenceId, MerchantLoyaltyProgram merchantLoyaltyProgram, String xMerchantKey) throws ApiException {
        okhttp3.Call localVarCall = joinOrConnectMerchantLoyaltyProgramValidateBeforeCall(memberReferenceId, merchantLoyaltyProgram, xMerchantKey, null);
        Type localVarReturnType = new TypeToken<MerchantLoyaltyProgramResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enroll a member in a Merchant Loyalty Program (asynchronously)
     * Enrolls the member in a Merchant Loyalty Program. Alternately, the member can connect an existing Loyalty ID for the Merchant Loyalty Program.
     * @param memberReferenceId A system generated unique identifier for the Member enrolled in MLC (required)
     * @param merchantLoyaltyProgram Contains merchant loyalty program details (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully joined/connected in Merchant Loyalty Program </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Member has already joined/connected to merchant loyalty program </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call joinOrConnectMerchantLoyaltyProgramAsync(String memberReferenceId, MerchantLoyaltyProgram merchantLoyaltyProgram, String xMerchantKey, final ApiCallback<MerchantLoyaltyProgramResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = joinOrConnectMerchantLoyaltyProgramValidateBeforeCall(memberReferenceId, merchantLoyaltyProgram, xMerchantKey, _callback);
        Type localVarReturnType = new TypeToken<MerchantLoyaltyProgramResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMerchantLoyaltyProgram
     * @param memberReferenceId Unique reference key for a member (required)
     * @param memberMerchantReferenceId Unique reference key that identifies member and merchant loyalty program association (required)
     * @param loyaltyProgram loyaltyProgram (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Merchant loyalty program is updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMerchantLoyaltyProgramCall(String memberReferenceId, String memberMerchantReferenceId, LoyaltyProgram loyaltyProgram, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = loyaltyProgram;

        // create path and map variables
        String localVarPath = "/members/{member_reference_id}/loyalty-programs/{member_merchant_reference_id}/loyalty-id"
            .replaceAll("\\{" + "member_reference_id" + "\\}", localVarApiClient.escapeString(memberReferenceId.toString()))
            .replaceAll("\\{" + "member_merchant_reference_id" + "\\}", localVarApiClient.escapeString(memberMerchantReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantKey != null) {
            localVarHeaderParams.put("X-Merchant-Key", localVarApiClient.parameterToString(xMerchantKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMerchantLoyaltyProgramValidateBeforeCall(String memberReferenceId, String memberMerchantReferenceId, LoyaltyProgram loyaltyProgram, String xMerchantKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'memberReferenceId' is set
        if (memberReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberReferenceId' when calling updateMerchantLoyaltyProgram(Async)");
        }
        
        // verify the required parameter 'memberMerchantReferenceId' is set
        if (memberMerchantReferenceId == null) {
            throw new ApiException("Missing the required parameter 'memberMerchantReferenceId' when calling updateMerchantLoyaltyProgram(Async)");
        }
        
        // verify the required parameter 'loyaltyProgram' is set
        if (loyaltyProgram == null) {
            throw new ApiException("Missing the required parameter 'loyaltyProgram' when calling updateMerchantLoyaltyProgram(Async)");
        }
        

        okhttp3.Call localVarCall = updateMerchantLoyaltyProgramCall(memberReferenceId, memberMerchantReferenceId, loyaltyProgram, xMerchantKey, _callback);
        return localVarCall;

    }

    /**
     * Update member Merchant Loyalty Program
     * Updates the Merchant Loyalty Program for an existing member in MLC.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param memberMerchantReferenceId Unique reference key that identifies member and merchant loyalty program association (required)
     * @param loyaltyProgram loyaltyProgram (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Merchant loyalty program is updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public void updateMerchantLoyaltyProgram(String memberReferenceId, String memberMerchantReferenceId, LoyaltyProgram loyaltyProgram, String xMerchantKey) throws ApiException {
        updateMerchantLoyaltyProgramWithHttpInfo(memberReferenceId, memberMerchantReferenceId, loyaltyProgram, xMerchantKey);
    }

    /**
     * Update member Merchant Loyalty Program
     * Updates the Merchant Loyalty Program for an existing member in MLC.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param memberMerchantReferenceId Unique reference key that identifies member and merchant loyalty program association (required)
     * @param loyaltyProgram loyaltyProgram (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Merchant loyalty program is updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMerchantLoyaltyProgramWithHttpInfo(String memberReferenceId, String memberMerchantReferenceId, LoyaltyProgram loyaltyProgram, String xMerchantKey) throws ApiException {
        okhttp3.Call localVarCall = updateMerchantLoyaltyProgramValidateBeforeCall(memberReferenceId, memberMerchantReferenceId, loyaltyProgram, xMerchantKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update member Merchant Loyalty Program (asynchronously)
     * Updates the Merchant Loyalty Program for an existing member in MLC.
     * @param memberReferenceId Unique reference key for a member (required)
     * @param memberMerchantReferenceId Unique reference key that identifies member and merchant loyalty program association (required)
     * @param loyaltyProgram loyaltyProgram (required)
     * @param xMerchantKey Key assigned to a &#39;Merchant&#39; Business Partner at the time of onboarding (optional, default to &quot;108d9290-5516-4235-ac0d-fddb04c6b003&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Merchant loyalty program is updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Member reference id not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access to information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMerchantLoyaltyProgramAsync(String memberReferenceId, String memberMerchantReferenceId, LoyaltyProgram loyaltyProgram, String xMerchantKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMerchantLoyaltyProgramValidateBeforeCall(memberReferenceId, memberMerchantReferenceId, loyaltyProgram, xMerchantKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
